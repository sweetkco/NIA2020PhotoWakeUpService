/**
 * Generated by Verge3D Puzzles v.3.4.0
 * Fri Nov 13 2020 20:13:38 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

var color;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  color = ['rgba(',61 + (194 / 100) * Math.round(_initGlob.percentage),', ',219 - (219 / 100) * Math.round(_initGlob.percentage),', 0, 1)'].join('');
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
  setHTMLElemStyle('width', String(Math.round(_initGlob.percentage)) + '%', 'apple_red', true);
  setHTMLElemStyle('color', color, 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  registerSetTimeout(0.5, function() {
    setHTMLElemStyle('display', 'none', 'progress_bar', true);
  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["fruits_counting"] = fruits_counting;
this.procedures["score_time_counting"] = score_time_counting;
this.procedures["Randomize_Empty"] = Randomize_Empty;
this.procedures["start_game"] = start_game;
this.procedures["Move_Left"] = Move_Left;
this.procedures["Move_Right"] = Move_Right;

var PROC = {
    "fruits_counting": fruits_counting,
    "score_time_counting": score_time_counting,
    "Randomize_Empty": Randomize_Empty,
    "start_game": start_game,
    "Move_Left": Move_Left,
    "Move_Right": Move_Right,
};

var index, add_time, add_score, scores, j, e, emptys_with_fruits, random_numder, time, ground_speed, fruits_max, empty_to_check, game_started, emptys_distance, farmer_position_prev, farmer_posotion_next, gamepad_timestamp, fruit_count, help_mode, fruits_amount, i, empty_index, farmers_position, move_steps, fruit_clone, random_empty, ground_speed_temp, m;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



function AudioWebAudio() {
    this.audio = new v3d.Audio(new v3d.AudioListener());

    this._muted = false;
    this._volume = 1;
}

Object.assign(AudioWebAudio.prototype, {

    load: function(url) {
        var scope = this;

        var xhr = new XMLHttpRequest()
        xhr.open('GET', url);
        xhr.responseType = 'arraybuffer';

        xhr.onload = function(e) {
            if (this.status === 200) {
                // new promise-based syntax is not currently supported in Safari
                scope.audio.context.decodeAudioData(this.response, function(decodedData) {
                    scope.audio.setBuffer(decodedData);
                });
            }
        }

        xhr.send();
        return this;
    },

    play: function() {
        if (this.audio.buffer === null) return;
        this.audio.play();
    },

    pause: function() {
        this.audio.pause();
    },

    stop: function() {
        if (this.audio.buffer === null) return;
        this.audio.stop();
    },

    rewind: function() {
        if (this.audio.buffer === null) return;

        var isPlaying = this.audio.isPlaying;
        this.audio.stop();
        if (isPlaying) {
            this.audio.play();
        }
    },

    isPlaying: function() {
        return this.audio.isPlaying;
    },

    setLoop: function(looped) {
        this.audio.setLoop(looped);
    },

    setVolume: function(volume) {
        this._volume = volume;
        if (!this._muted) {
            this.audio.setVolume(volume);
        }
    },

    setMuted: function(muted) {
        this._muted = muted;
        this.audio.setVolume(muted ? 0 : this._volume);
    },

});



// loadMedia puzzle
function loadMedia_WebAudio(url) {
    if (!v3d.Detector.checkWebAudio()) {
        if (!_noWebAudioReported) {
            _noWebAudioReported = true;
            console.warn('v3d.puzzles: Web Audio API not supported');
        }
        return null;
    }

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new AudioWebAudio().load(url);
    }
    return elems[url];
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}


// Describe this function...
function fruits_counting(index) {
  if (emptys_with_fruits[index].charAt(0) == 'a') {
    fruit_count[0] = fruit_count[0] + 1;
    setHTMLElemAttribute('innerHTML', fruit_count[0], 'apple_count', true);
    playSound(loadMedia_WebAudio('./sounds/fruit_pick_1.mp3'), false);
    score_time_counting(4, 2);
  } else if (emptys_with_fruits[index].charAt(0) == 'c') {
    fruit_count[1] = fruit_count[1] + 1;
    setHTMLElemAttribute('innerHTML', fruit_count[1], 'cherry_count', true);
    playSound(loadMedia_WebAudio('./sounds/fruit_pick_2.mp3'), false);
    score_time_counting(-1, 5);
  } else if (emptys_with_fruits[index].charAt(0) == 'p') {
    fruit_count[2] = fruit_count[2] + 1;
    setHTMLElemAttribute('innerHTML', fruit_count[2], 'pear_count', true);
    playSound(loadMedia_WebAudio('./sounds/fruit_pick_3.mp3'), false);
    score_time_counting(2, 3);
  } else if (emptys_with_fruits[index].charAt(0) == 's') {
    fruit_count[3] = fruit_count[3] + 1;
    playSound(loadMedia_WebAudio('./sounds/fruit_pick_4.mp3'), false);
    setHTMLElemAttribute('innerHTML', fruit_count[3], 'strawberry_count', true);
    score_time_counting(-3, 10);
  }
}

// Describe this function...
function score_time_counting(add_time, add_score) {
  scores = scores + add_score;
  time = time + add_time;
  setHTMLElemAttribute('innerHTML', scores, 'scores', true);
  setHTMLElemAttribute('innerHTML', time, 'time', true);
}


// volume puzzle
function volume(mediaElem, volume) {
    if (!mediaElem)
        return;

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElem.setVolume(v3d.Math.clamp(volume, 0.0, 1.0));
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}





/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// setObjTransform puzzle
function setObjTransform(objNames, mode, x, y, z, offset) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}



// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}



// addFog puzzle
function addFog(r, g, b, density) {
    appInstance.scene.fog = new v3d.FogExp2(_pGlob.colorTmp.setRGB(r, g, b),
            density);
}



// setInterval puzzle
function registerInterval(timeout, callback) {
    window.setInterval(callback, 1000 * timeout);
}



// removeObject puzzles
function removeObject(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj || !obj.parent)
            continue;

        obj.parent.remove(obj);

        // clean object cache
        _pGlob.objCache = {};
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// pauseSound puzzle
function pauseSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.pause();
}



function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadSound puzzle
function loadSound(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// distanceBetweenObjects puzzle
function getDistanceBetweenObjects(objName1, objName2) {
    if (!objName1 || !objName2)
        return;
    var obj1 = getObjectByName(objName1);
    var obj2 = getObjectByName(objName2);
    if (!obj1 || !obj2)
        return;
    return obj1.getWorldPosition(_pGlob.vec3Tmp).distanceTo(obj2.getWorldPosition(_pGlob.vec3Tmp2));
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }
    elem.addEventListener("click", function(event) {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    });
    function changeFullscreen() {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter();
        else
            cb_exit();
    }
    doc.addEventListener("webkitfullscreenchange", changeFullscreen);
    doc.addEventListener("mozfullscreenchange", changeFullscreen);
    doc.addEventListener("msfullscreenchange", changeFullscreen);
    doc.addEventListener("fullscreenchange", changeFullscreen);
    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}


function mathRandomInt(a, b) {
  if (a > b) {
    // Swap a and b to ensure a is smaller.
    var c = a;
    a = b;
    b = c;
  }
  return Math.floor(Math.random() * (b - a + 1) + a);
}


// cloneObject puzzle
function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// cloneObject puzzle
function cloneObject(objName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var newObj = obj.clone();
    newObj.name = findUniqueObjectName(obj.name);
    appInstance.scene.add(newObj);
    return newObj.name;
}



// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.getInverse(targetObj.matrixWorld);
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}



// snapToObject puzzle
function snapToObject(objName, targetObjName) {
    if (!objName || !targetObjName)
        return;
    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;
    obj.copyTransform(targetObj);
    obj.updateMatrixWorld(true);
}


// Describe this function...
function Randomize_Empty() {
  random_numder = mathRandomInt(1, 6);
  if (random_numder == 1) {
    empty_index = mathRandomInt(1, 9);
    random_empty = 'Empty.00' + String(empty_index);
  } else if (random_numder == 2) {
    empty_index = mathRandomInt(10, 99);
    random_empty = 'Empty.0' + String(empty_index);
  } else if (random_numder >= 3) {
    empty_index = mathRandomInt(100, 384);
    random_empty = 'Empty.' + String(empty_index);
  }
  if (emptys_distance[empty_index] < 30) {
    Randomize_Empty();
  }
}


// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



// rewindSound puzzle
function rewindSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.rewind();
}


// Describe this function...
function start_game() {
  setHTMLElemStyle('display', 'none', 'locker', true);
  setHTMLElemStyle('display', 'block', 'top_left_bar', true);
  setHTMLElemStyle('display', 'block', 'top_right_bar', true);
  tweenCamera('camera_point', 'lookat_point', 1, function() {}, 0);
  ground_speed = -0.2;
  fruits_max = 30;
  game_started = 1;
  time = 80;
  scores = 0;
  fruit_count[0] = 0;
  fruit_count[1] = 0;
  fruit_count[2] = 0;
  fruit_count[3] = 0;
  setHTMLElemAttribute('innerHTML', fruit_count[0], 'apple_count', true);
  setHTMLElemAttribute('innerHTML', fruit_count[1], 'cherry_count', true);
  setHTMLElemAttribute('innerHTML', fruit_count[2], 'pear_count', true);
  setHTMLElemAttribute('innerHTML', fruit_count[3], 'strawberry_count', true);
  for (m = 1; m <= 384; m++) {
    if (emptys_with_fruits[m] != 'empty') {
      changeVis(emptys_with_fruits[m], false);
      emptys_with_fruits[m] = 'empty';
    }
  }
  setHTMLElemAttribute('innerHTML', time, 'time', true);
  setHTMLElemAttribute('innerHTML', scores, 'scores', true);

  operateAnimation('PLAY', 'farmer_armature', null, null, 'LoopRepeat', 1,
          function() {}, true, false);

      playSound(loadMedia_WebAudio('./sounds/steps.mp3'), true);
  rewindSound(loadMedia_HTML5('./sounds/soundtrack.mp3'));
  playSound(loadMedia_HTML5('./sounds/soundtrack.mp3'), true);
  playSound(loadMedia_HTML5('./sounds/ambient_sound.mp3'), true);
}

// Describe this function...
function Move_Left() {
  if (farmer_position_prev == farmer_posotion_next && game_started == 1) {
    farmer_posotion_next = farmer_posotion_next + 1;
    move_steps = (farmer_posotion_next - farmer_position_prev) / 10;
  }
}


// getEventProperty puzzle
function getEventProperty(prop, event) {
    if (typeof event != "undefined") {
        switch (prop) {
            case 'target.id':
                return event.target.id;
            case 'target.value':
                return event.target.value;
            case 'touches.length':
                return event.touches.length;
            case 'touches[0].pageX':
                return event.touches[0].pageX;
            case 'touches[0].pageY':
                return event.touches[0].pageY;
            case 'touches[1].pageX':
                return event.touches[1].pageX;
            case 'touches[1].pageY':
                return event.touches[1].pageY;
            default:
                return event[prop];
        }
    }
}


// Describe this function...
function Move_Right() {
  if (farmer_position_prev == farmer_posotion_next && game_started == 1) {
    farmer_posotion_next = farmer_posotion_next - 1;
    move_steps = (farmer_posotion_next - farmer_position_prev) / 10;
  }
}


_pGlob.getInputSource = function(controller) {
    if (controller && controller.userData.v3d && controller.userData.v3d.inputSource) {
        return controller.userData.v3d.inputSource
    } else {
        return null;
    }
};

_pGlob.traverseNonControllers = function(obj, callback) {

    if (obj.name.startsWith('XR_CONTROLLER_'))
        return;

    callback(obj);

    var children = obj.children;

    for (var i = 0, l = children.length; i < l; i++) {

        _pGlob.traverseNonControllers(children[i], callback);

    }

};

_pGlob.xrGetIntersections = function(controller) {

    controller.updateMatrixWorld(true);

    _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);

    var objList = [];

    _pGlob.traverseNonControllers(appInstance.scene, function(obj) {
        objList.push(obj);
    });

    var raycaster = new v3d.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);

    return raycaster.intersectObjects(objList);

}

_pGlob.xrOnSelect = function(event) {

    var controller = event.target;

    var intersections = _pGlob.xrGetIntersections(controller);

    if (intersections.length > 0) {
        var intersection = intersections[0];
        var obj = intersection.object;

        // save the object for the pickedObject block
        _pGlob.pickedObject = getPickedObjectName(obj);

        _pGlob.objClickInfo.forEach(function(el) {
            var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
            el.callbacks[isPicked ? 0 : 1]();
        });
    } else {
        _pGlob.objClickInfo.forEach(function(el) {
            // missed
            el.callbacks[1]();
        });
    }

}



// getGamepadProp puzzle
function getGamepadProp(index, prop, controlIndex) {

    if (_pGlob.xrSessionAcquired) {
        var controller = appInstance.xrControllers[index];

        if (controller && controller.userData.v3d && controller.userData.v3d.inputSource &&
                controller.userData.v3d.inputSource.gamepad)
            var gamepad = controller.userData.v3d.inputSource.gamepad;
        else
            var gamepad = undefined;

    } else {
        var gamepad = navigator.getGamepads()[index];
    }

    switch (prop) {
    case 'AXIS':
        if (gamepad)
            return (gamepad.axes[controlIndex] || 0);
        else
            return 0;

    case 'BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.pressed;
            else
                return false;
        } else {
            return false;
        }

    case 'ANALOG_BUTTON':
        if (gamepad) {
            var button = gamepad.buttons[controlIndex];

            if (button)
                return button.value;
            else
                return 0.0;
        } else {
            return 0.0;
        }

    case 'ID':
        if (gamepad)
            return gamepad.id;
        else
            return '';

    case 'CONNECTION_STATUS':
        if (gamepad)
            return gamepad.connected;
        else
            return false;

    case 'TIMESTAMP':
        if (gamepad)
            return gamepad.timestamp;
        else
            return 0.0;

    case 'DEBUG_INFO':
        if (gamepad) {

            var axes = gamepad.axes;
            var axesValues = []

            for (var i = 0; i < axes.length; i++) {
                axesValues.push(Math.round(axes[i] * 1000) / 1000);
            }

            var buttons = gamepad.buttons;
            var btnsPressed = [];
            var btnsValues = [];

            for (var i = 0; i < buttons.length; i++) {
                btnsPressed.push(buttons[i].pressed ? '☑' : '☐');
                btnsValues.push(Math.round(buttons[i].value * 1000) / 1000);
            }

            return 'Index: ' + index + '\n' +
                   'Connected: ' + (gamepad.connected ? 'Yes' : 'No') + '\n' +
                   'ID: ' + (gamepad.id ? gamepad.id : 'N/A') + '\n' +
                   'Axes: ' + String(axesValues) + '\n' +
                   'Buttons: ' + String(btnsPressed) + '\n' +
                   'Analog Buttons: ' + String(btnsValues) + '\n' +
                   'Timestamp: ' + gamepad.timestamp.toFixed(3);
        } else {
            return 'Gamepad not available';
        }
    }

}



volume(loadMedia_WebAudio('./sounds/fruit_pick_1.mp3'), 0.7);
volume(loadMedia_WebAudio('./sounds/fruit_pick_2.mp3'), 0.7);
volume(loadMedia_WebAudio('./sounds/fruit_pick_3.mp3'), 0.7);
volume(loadMedia_WebAudio('./sounds/fruit_pick_4.mp3'), 0.7);

registerEveryFrame(function() {
  setObjTransform('ground', 'rotation', ground_speed, '', '', true);
  setObjTransform('clouds', 'rotation', '', '', 0.03, true);
});

addFog(0.777246, 0.858164, 1, 0.04);

registerInterval(10, function() {
  if (game_started == 1 && ground_speed < 1) {
    fruits_max = fruits_max + 5;
    ground_speed = ground_speed - 0.01;
  }
});

registerEveryFrame(function() {
  for (j = 1; j <= 9; j++) {
    if (emptys_distance[j] <= 0.5 && emptys_with_fruits[j] != 'empty') {
      removeObject(emptys_with_fruits[j]);
      fruits_counting(j);
      fruits_amount = fruits_amount - 1;
      emptys_with_fruits[j] = 'empty';
    }
  }
  for (j = 10; j <= 99; j++) {
    if (emptys_distance[j] <= 0.5 && emptys_with_fruits[j] != 'empty') {
      removeObject(emptys_with_fruits[j]);
      fruits_counting(j);
      fruits_amount = fruits_amount - 1;
      emptys_with_fruits[j] = 'empty';
    }
  }
  for (j = 100; j <= 384; j++) {
    if (emptys_distance[j] <= 0.5 && emptys_with_fruits[j] != 'empty') {
      removeObject(emptys_with_fruits[j]);
      fruits_counting(j);
      fruits_amount = fruits_amount - 1;
      emptys_with_fruits[j] = 'empty';
    }
  }
});

eventHTMLElem('click', 'help_button', true, function(event) {
  if (help_mode == 0) {
    setHTMLElemStyle('display', 'block', 'help', true);
    setHTMLElemStyle('display', 'none', 'top_left_bar', true);
    help_mode = 1;
    game_started = 0;
    ground_speed_temp = ground_speed;
    ground_speed = 0;

    operateAnimation('STOP', 'farmer_armature', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        pauseSound(loadMedia_WebAudio('./sounds/steps.mp3'));
    pauseSound(loadSound('./sounds/soundtrack.mp3'));
  } else if (help_mode == 1) {
    setHTMLElemStyle('display', 'none', 'help', true);
    setHTMLElemStyle('display', 'block', 'top_left_bar', true);
    help_mode = 0;
    game_started = 1;
    ground_speed = ground_speed_temp;

    operateAnimation('PLAY', 'farmer_armature', null, null, 'LoopRepeat', 1,
            function() {}, true, false);

        playSound(loadMedia_WebAudio('./sounds/steps.mp3'), true);
    playSound(loadMedia_HTML5('./sounds/soundtrack.mp3'), true);
  }
});

registerEveryFrame(function() {
  for (e = 1; e <= 9; e++) {
    empty_to_check = 'Empty.00' + String(e);
    emptys_distance[e] = getDistanceBetweenObjects('fruit_picker', empty_to_check);
  }
  for (e = 10; e <= 99; e++) {
    empty_to_check = 'Empty.0' + String(e);
    emptys_distance[e] = getDistanceBetweenObjects('fruit_picker', empty_to_check);
  }
  for (e = 100; e <= 384; e++) {
    empty_to_check = 'Empty.' + String(e);
    emptys_distance[e] = getDistanceBetweenObjects('fruit_picker', empty_to_check);
  }
});

registerInterval(1, function() {
  if (game_started == 1 && time > 0) {
    time = time - 1;
    setHTMLElemAttribute('innerHTML', time, 'time', true);
  } else if (game_started == 1 && time <= 0) {
    game_started = 0;
    ground_speed = 0;
    time = 0;

    operateAnimation('STOP', 'farmer_armature', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        pauseSound(loadMedia_WebAudio('./sounds/steps.mp3'));
    setHTMLElemStyle('display', 'block', 'final_scores_bar', true);
    setHTMLElemAttribute('innerHTML', scores, 'final_scores', true);
    pauseSound(loadMedia_HTML5('./sounds/soundtrack.mp3'));
    playSound(loadMedia_WebAudio('./sounds/tada.mp3'), false);
    setHTMLElemStyle('display', 'none', 'top_left_bar', true);
    setHTMLElemStyle('display', 'none', 'top_right_bar', true);
  }
});

initFullscreen('fullscreen_button', true, function() {
  setHTMLElemStyle('backgroundImage', 'images/fullscreen_off.png', 'fullscreen_button', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'images/fullscreen_on.png', 'fullscreen_button', true);
}, function() {});

registerInterval(1, function() {
  if (fruits_max != fruits_amount) {
    random_numder = mathRandomInt(1, 4);
    if (random_numder == 1) {
      fruit_clone = cloneObject('apple');
    } else if (random_numder == 2) {
      fruit_clone = cloneObject('cherry');
    } else if (random_numder == 3) {
      fruit_clone = cloneObject('pear');
    } else if (random_numder == 4) {
      fruit_clone = cloneObject('strawberry');
    }
    Randomize_Empty();
    if (emptys_with_fruits[empty_index] == 'empty') {
      emptys_with_fruits[empty_index] = fruit_clone;
      makeParent(fruit_clone, random_empty);
      snapToObject(fruit_clone, random_empty);
      setObjTransform(fruit_clone, 'rotation', '', mathRandomInt(1, 360), '', true);
      fruits_amount = fruits_amount + 1;
    }
  }
});


operateAnimation('STOP', 'farmer_armature', null, null, 'AUTO', 1,
        function() {}, undefined, false);

    emptys_with_fruits = [];
emptys_distance = [];
for (i = 1; i <= 384; i++) {
  emptys_with_fruits[i] = 'empty';
}
farmers_position = 0;
farmer_position_prev = 0;
farmer_posotion_next = 0;
move_steps = 0;
setObjTransform('farmer_armature', 'position', 0, '', '', false);
fruits_max = 0;
fruits_amount = 0;
ground_speed = 0;
fruit_count = [0, 0, 0, 0];
game_started = 0;
scores = 0;
time = 0;
help_mode = 0;
volume(loadMedia_HTML5('./sounds/ambient_sound.mp3'), 0.2);
volume(loadMedia_WebAudio('./sounds/steps.mp3'), 0.3);
volume(loadMedia_WebAudio('./sounds/tada.mp3'), 0.6);
volume(loadMedia_HTML5('./sounds/soundtrack.mp3'), 0.2);

eventHTMLElem('click', 'startout_button', true, function(event) {
  start_game();
});

registerEveryFrame(function() {
  if (farmers_position != farmer_posotion_next) {
    setObjTransform('farmer_armature', 'position', farmers_position, '', '', false);
    farmers_position = Math.round((farmers_position + move_steps) * 10) / 10;
  } else if (farmers_position == farmer_posotion_next) {
    farmer_position_prev = farmers_position;
  }
});

eventHTMLElem('click', 'startagain_button', true, function(event) {
  start_game();
  setHTMLElemStyle('display', 'none', 'final_scores_bar', true);
});

eventHTMLElem('keydown', ['BODY'], true, function(event) {
  if (farmers_position < 1 && getEventProperty('key', event) == 'a') {
    Move_Left();
  } else if (getEventProperty('key', event) == 'd' && farmers_position > -1) {
    Move_Right();
  }
  if (farmers_position < 1 && getEventProperty('key', event) == 'ArrowLeft') {
    Move_Left();
  } else if (getEventProperty('key', event) == 'ArrowRight' && farmers_position > -1) {
    Move_Right();
  }
});

eventHTMLElem('click', 'button_left', true, function(event) {
  if (farmers_position > -1) {
    Move_Right();
  }
});

registerEveryFrame(function() {
  if (getGamepadProp(0, 'CONNECTION_STATUS', '0')) {
    if (gamepad_timestamp != getGamepadProp(0, 'TIMESTAMP', '0')) {
      if (farmers_position < 1 && getGamepadProp(0, 'AXIS', '0') == -1) {
        Move_Left();
      } else if (getGamepadProp(0, 'AXIS', '0') == 1 && farmers_position > -1) {
        Move_Right();
      }
    }
  }
  gamepad_timestamp = getGamepadProp(0, 'TIMESTAMP', '0');
});

eventHTMLElem('click', 'button_right', true, function(event) {
  if (farmers_position < 1) {
    Move_Left();
  }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
