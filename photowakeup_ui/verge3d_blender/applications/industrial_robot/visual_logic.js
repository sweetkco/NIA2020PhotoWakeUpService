/**
 * Generated by Verge3D Puzzles v.3.4.0
 * Fri Nov 13 2020 20:13:02 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}




// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["limits_check"] = limits_check;
this.procedures["limits_reset"] = limits_reset;
this.procedures["hide_all_buttons"] = hide_all_buttons;
this.procedures["show_only_left"] = show_only_left;
this.procedures["hide_animation_buttons"] = hide_animation_buttons;
this.procedures["show_all_buttons"] = show_all_buttons;
this.procedures["show_animation_buttons"] = show_animation_buttons;
this.procedures["show_only_right"] = show_only_right;
this.procedures["nozzle_manipulator_check"] = nozzle_manipulator_check;
this.procedures["reset_pose"] = reset_pose;
this.procedures["colorizing_interface"] = colorizing_interface;
this.procedures["manipulators_selection"] = manipulators_selection;
this.procedures["reset_animations"] = reset_animations;
this.procedures["sounds_volume_reset"] = sounds_volume_reset;
this.procedures["sounds_volume_mute"] = sounds_volume_mute;
this.procedures["cables_update"] = cables_update;
this.procedures["animation_step_1"] = animation_step_1;
this.procedures["animation_step_2"] = animation_step_2;
this.procedures["animation_step_3"] = animation_step_3;

var PROC = {
    "limits_check": limits_check,
    "limits_reset": limits_reset,
    "hide_all_buttons": hide_all_buttons,
    "show_only_left": show_only_left,
    "hide_animation_buttons": hide_animation_buttons,
    "show_all_buttons": show_all_buttons,
    "show_animation_buttons": show_animation_buttons,
    "show_only_right": show_only_right,
    "nozzle_manipulator_check": nozzle_manipulator_check,
    "reset_pose": reset_pose,
    "colorizing_interface": colorizing_interface,
    "manipulators_selection": manipulators_selection,
    "reset_animations": reset_animations,
    "sounds_volume_reset": sounds_volume_reset,
    "sounds_volume_mute": sounds_volume_mute,
    "cables_update": cables_update,
    "animation_step_1": animation_step_1,
    "animation_step_2": animation_step_2,
    "animation_step_3": animation_step_3,
};

var all_buttons, animated_objects, nozzle_dop_limit, manipulator_color_1, manipulator_color_2, interface_color, transparent_color, clicked, all_sounds_list, help_showed, ar_animation_index, sounds_is_played, help_visible, robot_slected_part, mode_type, robot_parts_list, button_1_hovered, vr_available, button_2_hovered, button_3_hovered, ar_available, ar_mode_on, manipulators_list, animation_1_playing, animation_2_playing, animation_3_playing, nozzle_installed, color_mode, button_1_light, ar_base_fixed, i, button_2_light, nozzles_list, robot_coloring_list, nozzles_status, button_3_light;


// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}





/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objNames, mode, min, max) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.Math.degToRad(-max);
                    cons.max = v3d.Math.degToRad(-min);
                } else {
                    cons.min = v3d.Math.degToRad(min);
                    cons.max = v3d.Math.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;
        }
    }
}


// Describe this function...
function limits_check() {
  if (nozzle_installed == 'claws') {
    nozzle_dop_limit = 5;
  } else if (nozzle_installed == 'drill') {
    nozzle_dop_limit = 8;
  } else if (nozzle_installed == 'welding') {
    nozzle_dop_limit = 5;
  } else if (nozzle_installed == 'none') {
    nozzle_dop_limit = 0;
  }
  if (getObjTransform('instance_3', 'rotation', 'y') == -19) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, 19 + nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < -10 && getObjTransform('instance_3', 'rotation', 'y') > -19) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, 10 + nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 0 && getObjTransform('instance_3', 'rotation', 'y') > -10) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, 5 + nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 10 && getObjTransform('instance_3', 'rotation', 'y') > 0) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, 0 + nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 20 && getObjTransform('instance_3', 'rotation', 'y') > 10) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -5 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 30 && getObjTransform('instance_3', 'rotation', 'y') > 20) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -10 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 40 && getObjTransform('instance_3', 'rotation', 'y') > 30) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -15 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 50 && getObjTransform('instance_3', 'rotation', 'y') > 40) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -20 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 60 && getObjTransform('instance_3', 'rotation', 'y') > 50) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -25 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 70 && getObjTransform('instance_3', 'rotation', 'y') > 60) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -30 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 80 && getObjTransform('instance_3', 'rotation', 'y') > 70) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -35 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 90 && getObjTransform('instance_3', 'rotation', 'y') > 80) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -40 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 100 && getObjTransform('instance_3', 'rotation', 'y') > 90) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -45 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 110 && getObjTransform('instance_3', 'rotation', 'y') > 100) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -50 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 120 && getObjTransform('instance_3', 'rotation', 'y') > 110) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -55 - nozzle_dop_limit);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 130 && getObjTransform('instance_3', 'rotation', 'y') > 120) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -60 - nozzle_dop_limit * 2);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 140 && getObjTransform('instance_3', 'rotation', 'y') > 130) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -65 - nozzle_dop_limit * 3);
  } else if (getObjTransform('instance_3', 'rotation', 'y') > 140) {
    objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, -70 - nozzle_dop_limit * 4);
  }
  if (getObjTransform('instance_3', 'rotation', 'y') >= 170) {
    objConstraintAddLimit('Limit Rotation', 'instance_5', 'ROT_Y', -140, 80);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 170 && getObjTransform('instance_3', 'rotation', 'y') > 160) {
    objConstraintAddLimit('Limit Rotation', 'instance_5', 'ROT_Y', -140, 95);
  } else if (getObjTransform('instance_3', 'rotation', 'y') < 150) {
    objConstraintAddLimit('Limit Rotation', 'instance_5', 'ROT_Y', -140, 140);
  }
  if ((nozzle_installed == 'welding' || nozzle_installed == 'claws') && getObjTransform('instance_2', 'rotation', 'y') > -100) {
    objConstraintAddLimit('Limit Rotation', 'instance_3', 'ROT_Y', -19, 160);
  } else if (nozzle_installed == 'drill') {
    objConstraintAddLimit('Limit Rotation', 'instance_3', 'ROT_Y', -19, 155);
    objConstraintAddLimit('Limit Rotation', 'instance_5', 'ROT_Y', -105, 105);
  } else {
    objConstraintAddLimit('Limit Rotation', 'instance_3', 'ROT_Y', -19, 174);
  }
}

// Describe this function...
function limits_reset() {
  objConstraintAddLimit('Limit Rotation', 'instance_2', 'ROT_Y', -139, 19);
  objConstraintAddLimit('Limit Rotation', 'instance_3', 'ROT_Y', -19, 174);
  objConstraintAddLimit('Limit Rotation', 'instance_5', 'ROT_Y', -140, 140);
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}


// Describe this function...
function hide_all_buttons() {
  setHTMLElemStyle('visibility', 'hidden', all_buttons, true);
}

// Describe this function...
function show_only_left() {
  setHTMLElemStyle('visibility', 'visible', 'function_button_0', true);
  setHTMLElemStyle('visibility', 'visible', 'function_button_1', true);
  setHTMLElemStyle('visibility', 'visible', 'function_button_2', true);
  setHTMLElemStyle('visibility', 'visible', 'function_button_3', true);
  setHTMLElemStyle('visibility', 'visible', 'reset_pose_button', true);
}

// Describe this function...
function hide_animation_buttons() {
  setHTMLElemStyle('visibility', 'hidden', 'animation_step_1', true);
  setHTMLElemStyle('visibility', 'hidden', 'animation_step_2', true);
  setHTMLElemStyle('visibility', 'hidden', 'animation_step_3', true);
  setHTMLElemStyle('visibility', 'hidden', 'reset_pose_button', true);
}

// Describe this function...
function show_all_buttons() {
  setHTMLElemStyle('visibility', 'visible', all_buttons, true);
}

// Describe this function...
function show_animation_buttons() {
  setHTMLElemStyle('visibility', 'visible', 'animation_step_1', true);
  setHTMLElemStyle('visibility', 'visible', 'reset_pose_button', true);
}

// Describe this function...
function show_only_right() {
  setHTMLElemStyle('visibility', 'visible', 'color_button_0', true);
  setHTMLElemStyle('visibility', 'visible', 'color_button_1', true);
  setHTMLElemStyle('visibility', 'visible', 'color_button_2', true);
  setHTMLElemStyle('visibility', 'visible', 'color_button_3', true);
  setHTMLElemStyle('visibility', 'visible', 'color_mode_button', true);
}


// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}


// Describe this function...
function nozzle_manipulator_check() {
  changeVis('claws_open', false);
  changeVis('drill_on_off', false);
  changeVis('welding_on', false);
  if (nozzle_installed == 'claws') {
    changeVis('claws_open', true);
  } else if (nozzle_installed == 'drill') {
    changeVis('drill_on_off', true);
  } else if (nozzle_installed == 'welding') {
    changeVis('welding_on', true);
  }
}


// setObjTransform puzzle
function setObjTransform(objNames, mode, x, y, z, offset) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.Math.DEG2RAD);
    }

    var coordSystem = getCoordSystem();

    coordsTransform(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    coordsTransform(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj) continue;

        if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = eulerV3DToBlenderShortest(obj.rotation, _pGlob.eulerTmp);
            coordsTransform(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}


// Describe this function...
function reset_pose() {
  setObjTransform('base', 'position', 0, 0, 0, false);
  setObjTransform('base', 'rotation', 0, 0, 0, false);
  setObjTransform('instance_1', 'rotation', 0, 0, 0, false);
  setObjTransform('instance_2', 'rotation', 0, -140, 0, false);
  setObjTransform('instance_3', 'rotation', 0, 139, 0, false);
  setObjTransform('instance_4', 'rotation', 0, 0, 0, false);
  setObjTransform('instance_5', 'rotation', 0, 90, 0, false);
  setObjTransform('nozzle_pace', 'rotation', 0, 0, 0, false);
}


// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var hasSkinning = firstSubmesh.isSkinnedMesh;
            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasSkinning || hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasSkinning) {
                    newMat.skinning = true;
                }

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}



// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}


// Describe this function...
function colorizing_interface(manipulator_color_1, manipulator_color_2, interface_color, transparent_color) {
  assignMat(manipulators_list, manipulator_color_1);
  assignMat('claws_open', manipulator_color_2);
  setHTMLElemStyle('backgroundColor', interface_color, ['fullscreen_button', 'function_button_0', 'function_button_1', 'function_button_2', 'function_button_3', 'reset_pose_button', 'color_button_0', 'color_button_1', 'color_button_2', 'color_button_3', 'color_mode_button', 'interface_color_panel', 'change_mode_button', 'animation_step_1', 'animation_step_2', 'animation_step_3', 'help_button', 'enter_vr_button', 'enter_ar_button'], true);
  setHTMLElemStyle('borderColor', interface_color, ['fullscreen_button', 'function_button_0', 'function_button_1', 'function_button_2', 'function_button_3', 'reset_pose_button', 'color_button_0', 'color_button_1', 'color_button_2', 'color_button_3', 'color_mode_button', 'animation_step_1', 'animation_step_2', 'animation_step_3', 'help_button', 'free_mode_help', 'animation_mode_help'], true);
  setCSSRuleStyle('backgroundColor', interface_color, '.separator-1', true,'');
  setCSSRuleStyle('backgroundColor', interface_color, '.separator-2', true,'');
  setCSSRuleStyle('backgroundColor', transparent_color, '.help-panel', true,'');
}

// Describe this function...
function manipulators_selection(clicked) {
  changeVis(manipulators_list, false);
  hide_all_buttons();
  nozzle_manipulator_check();
  if (clicked == 'base') {
    changeVis('base_rotate', true);
    changeVis('base_shift', true);
    show_only_left();
  } else if (clicked == 'instance_1') {
    changeVis('instance_1_rotate', true);
    show_only_left();
    show_only_right();
  } else if (clicked == 'instance_2') {
    changeVis('instance_2_rotate', true);
    show_only_left();
    show_only_right();
  } else if (clicked == 'instance_3') {
    changeVis('instance_3_rotate', true);
    show_only_left();
    show_only_right();
  } else if (clicked == 'instance_4') {
    changeVis('instance_4_rotate', true);
    show_only_left();
    show_only_right();
  } else if (clicked == 'instance_5') {
    changeVis('instance_5_rotate', true);
    show_only_left();
    show_only_right();
  } else if (clicked == 'counterweight') {
    show_only_left();
    show_only_right();
  } else if (clicked == 'claws') {
    changeVis('nozzle_rotate', true);
    show_only_left();
  } else if (clicked == 'drill') {
    changeVis('nozzle_rotate', true);
    show_only_left();
  } else if (clicked == 'welding') {
    changeVis('nozzle_rotate', true);
    show_only_left();
  }
}


/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



// snapToObject puzzle
function snapToObject(objName, targetObjName) {
    if (!objName || !targetObjName)
        return;
    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;
    obj.copyTransform(targetObj);
    obj.updateMatrixWorld(true);
}



// makeParent puzzle
function makeParent(objName, targetObjName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    if (targetObjName && targetObjName !== LIST_NONE) {
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj)
            return;
    } else {
        obj.traverseAncestors(function(ancObj) {
            if (ancObj.type == "Scene")
                targetObj = ancObj;
        });
    }
    var matOffset = new v3d.Matrix4();
    matOffset.getInverse(targetObj.matrixWorld);
    matOffset.multiply(obj.matrixWorld);
    matOffset.decompose(obj.position, obj.quaternion, obj.scale);
    targetObj.add(obj);

    obj.updateMatrixWorld(true);
}


// Describe this function...
function reset_animations() {

  operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', animated_objects, 196, null, 'AUTO', 1,
          function() {}, undefined, false);

      changeVis(nozzles_list, false);
  snapToObject('Cylinder', 'cylinder_reset_place');
  snapToObject('verge3d_logo', 'verge3d_logo_reset_place');
  makeParent('Cylinder', 'Empty');
  makeParent('verge3d_logo', 'Empty');

  operateAnimation('SET_FRAME', 'Cylinder', 196, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('SET_FRAME', 'verge3d_logo', 196, null, 'AUTO', 1,
          function() {}, undefined, false);

      }


function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});



// loadSound puzzle
function loadSound(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}



// volume puzzle
function volume(mediaElem, volume) {
    if (!mediaElem)
        return;

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElem.setVolume(v3d.Math.clamp(volume, 0.0, 1.0));
}


// Describe this function...
function sounds_volume_reset() {
  volume(loadSound('./sounds/box_kick.mp3'), 0.8);
  volume(loadSound('./sounds/box_popup.mp3'), 0.5);
  volume(loadSound('./sounds/claws_open_close.mp3'), 0.3);
  volume(loadSound('./sounds/drill_on.wav'), 0.2);
  volume(loadSound('./sounds/welding.mp3'), 0.7);
  volume(loadSound('./sounds/nozzle_install.mp3'), 0.3);
  volume(loadSound('./sounds/paint_spray.mp3'), 0.5);
  volume(loadSound('./sounds/cylinder_popup.mp3'), 0.5);
  volume(loadSound('./sounds/cylinder_pick.mp3'), 0.4);
  volume(loadSound('./sounds/cylinder_drop.mp3'), 0.5);
  volume(loadSound('./sounds/base_moving_sound.mp3'), 0.5);
  volume(loadSound('./sounds/instance_1_rotation_sound.mp3'), 0.3);
  volume(loadSound('./sounds/instance_2_rotation_sound.mp3'), 0.2);
  volume(loadSound('./sounds/instance_3_rotation_sound.mp3'), 0.2);
  volume(loadSound('./sounds/instance_4_rotation_sound.mp3'), 0.2);
  volume(loadSound('./sounds/instance_5_rotation_sound.mp3'), 0.2);
  volume(loadSound('./sounds/nozzle_rotation_sound.mp3'), 0.3);
  volume(loadSound('./sounds/hover_item.mp3'), 0.2);
}

// Describe this function...
function sounds_volume_mute() {
  volume(loadSound('./sounds/box_kick.mp3'), 0);
  volume(loadSound('./sounds/box_popup.mp3'), 0);
  volume(loadSound('./sounds/claws_open_close.mp3'), 0);
  volume(loadSound('./sounds/drill_on.wav'), 0);
  volume(loadSound('./sounds/welding.mp3'), 0);
  volume(loadSound('./sounds/nozzle_install.mp3'), 0);
  volume(loadSound('./sounds/paint_spray.mp3'), 0);
  volume(loadSound('./sounds/cylinder_popup.mp3'), 0);
  volume(loadSound('./sounds/cylinder_pick.mp3'), 0);
  volume(loadSound('./sounds/cylinder_drop.mp3'), 0);
  volume(loadSound('./sounds/base_moving_sound.mp3'), 0);
  volume(loadSound('./sounds/instance_1_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/instance_2_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/instance_3_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/instance_4_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/instance_5_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/nozzle_rotation_sound.mp3'), 0);
  volume(loadSound('./sounds/hover_item.mp3'), 0);
}

// Describe this function...
function cables_update() {
  if (getObjTransform('instance_2', 'rotation', 'y') <= 19 && getObjTransform('instance_2', 'rotation', 'y') >= -159) {

    operateAnimation('SET_FRAME', 'lower_cable_armature', Math.abs(getObjTransform('instance_2', 'rotation', 'y') - 19), null, 'AUTO', 1,
            function() {}, undefined, false);

        if (getObjTransform('instance_3', 'rotation', 'y') >= -19 && getObjTransform('instance_3', 'rotation', 'y') <= 174) {

      operateAnimation('SET_FRAME', 'upper_cable_armature', getObjTransform('instance_3', 'rotation', 'y') + 19, null, 'AUTO', 1,
              function() {}, undefined, false);

          }
  }
}


// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// isAnimationPlaying puzzle
function isAnimationPlaying(animations) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];
    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (!animName)
            continue;
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (action && action.isRunning())
            return true;
    }
    return false;
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// pauseSound puzzle
function pauseSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.pause();
}


// Describe this function...
function animation_step_1() {
  if (isAnimationPlaying(animated_objects) == false) {
    animation_1_playing = true;

    operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
            function() {}, undefined, false);

        changeVis(nozzles_list, false);
    changeVis('claws', true);
    changeVis('Cylinder_cap', true);
    playSound(loadSound('./sounds/nozzle_install.mp3'), false);
    snapToObject('Cylinder', 'cylinder_reset_place');
    snapToObject('verge3d_logo', 'verge3d_logo_reset_place');
    makeParent('Cylinder', 'Empty');
    makeParent('verge3d_logo', 'Empty');
    registerSetTimeout(0.2, function() {
      playSound(loadSound('./sounds/cylinder_popup.mp3'), false);
    });

    operateAnimation('PLAY', 'Cylinder', 196, 282, 'AUTO', 1,
            function() {}, true, false);


    operateAnimation('PLAY', animated_objects, 196, 265, 'AUTO', 1,
            function() {
      playSound(loadSound('./sounds/claws_open_close.mp3'), false);

      operateAnimation('PLAY', animated_objects, 265, 282, 'AUTO', 1,
              function() {
        makeParent('Cylinder', 'nozzle_pace');
        playSound(loadSound('./sounds/cylinder_pick.mp3'), false);

        operateAnimation('PLAY', animated_objects, 282, 350, 'AUTO', 1,
                function() {
          makeParent('Cylinder', 'Empty');
          playSound(loadSound('./sounds/cylinder_drop.mp3'), false);
          playSound(loadSound('./sounds/claws_open_close.mp3'), false);

          operateAnimation('PLAY', animated_objects, 350, 380, 'AUTO', 1,
                  function() {
            registerSetTimeout(1, function() {
              changeVis('claws', false);
              changeVis(['GROUP', 'drill'], true);
              playSound(loadSound('./sounds/nozzle_install.mp3'), false);

              operateAnimation('PLAY', animated_objects, 380, 400, 'AUTO', 1,
                      function() {
                playSound(loadSound('./sounds/drill_on.wav'), true);
                registerSetTimeout(1.2, function() {
                  changeVis('Cylinder_cap', false);
                });

                operateAnimation('PLAY', animated_objects, 400, 470, 'AUTO', 1,
                        function() {

                  operateAnimation('PLAY', animated_objects, 470, 490, 'AUTO', 1,
                          function() {
                    pauseSound(loadSound('./sounds/drill_on.wav'));
                    setHTMLElemStyle('visibility', 'visible', 'animation_step_2', true);
                    animation_1_playing = false;
                    ar_animation_index = 1;
                  }, true, false);

                      }, true, false);

                    }, true, false);

                  });
          }, true, false);

              }, true, false);

            }, true, false);

          }, true, false);

        }
}

// Describe this function...
function animation_step_2() {
  if (isAnimationPlaying(animated_objects) == false) {
    animation_2_playing = true;

    operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
            function() {}, undefined, false);

        changeVis(nozzles_list, false);
    playSound(loadSound('./sounds/nozzle_install.mp3'), false);
    changeVis('claws', true);
    snapToObject('Cylinder', 'cylinder_welding_place');
    makeParent('Cylinder', 'Empty');
    snapToObject('verge3d_logo', 'verge3d_logo_reset_place');
    makeParent('verge3d_logo', 'Empty');
    registerSetTimeout(0.2, function() {
      playSound(loadSound('./sounds/cylinder_popup.mp3'), false);
    });

    operateAnimation('PLAY', 'verge3d_logo', 490, 633, 'AUTO', 1,
            function() {}, true, false);


    operateAnimation('PLAY', animated_objects, 490, 585, 'AUTO', 1,
            function() {
      playSound(loadSound('./sounds/claws_open_close.mp3'), false);

      operateAnimation('PLAY', animated_objects, 585, 620, 'AUTO', 1,
              function() {
        playSound(loadSound('./sounds/claws_open_close.mp3'), false);

        operateAnimation('PLAY', animated_objects, 620, 633, 'AUTO', 1,
                function() {
          makeParent('verge3d_logo', 'nozzle_pace');
          playSound(loadSound('./sounds/cylinder_pick.mp3'), false);

          operateAnimation('PLAY', animated_objects, 633, 750, 'AUTO', 1,
                  function() {
            makeParent('verge3d_logo', 'Empty');
            playSound(loadSound('./sounds/cylinder_drop.mp3'), false);
            playSound(loadSound('./sounds/claws_open_close.mp3'), false);

            operateAnimation('PLAY', animated_objects, 750, 815, 'AUTO', 1,
                    function() {
              changeVis('claws', false);
              playSound(loadSound('./sounds/nozzle_install.mp3'), false);
              changeVis('welding', true);
              changeVis('welding_sparkles', true);

              operateAnimation('PLAY', animated_objects, 815, 845, 'AUTO', 1,
                      function() {
                playSound(loadSound('./sounds/welding.mp3'), false);

                operateAnimation('PLAY', animated_objects, 845, 990, 'AUTO', 1,
                        function() {
                  playSound(loadSound('./sounds/welding.mp3'), false);

                  operateAnimation('PLAY', animated_objects, 990, 1080, 'AUTO', 1,
                          function() {
                    changeVis('welding_sparkles', false);
                    setHTMLElemStyle('visibility', 'visible', 'animation_step_3', true);
                    animation_2_playing = false;
                    ar_animation_index = 2;
                  }, true, false);

                      }, true, false);

                    }, true, false);

                  }, true, false);

                }, true, false);

              }, true, false);

            }, true, false);

          }, true, false);

        }
}

// Describe this function...
function animation_step_3() {
  if (isAnimationPlaying(animated_objects) == false) {
    animation_3_playing = true;

    operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
            function() {}, undefined, false);

        changeVis(nozzles_list, false);
    playSound(loadSound('./sounds/nozzle_install.mp3'), false);
    changeVis('claws', true);
    snapToObject('Cylinder', 'cylinder_welding_place');
    makeParent('Cylinder', 'Empty');
    snapToObject('verge3d_logo', 'Cylinder');
    makeParent('verge3d_logo', 'Cylinder');
    setObjTransform('verge3d_logo', 'rotation', 90, 0, 0, false);

    operateAnimation('PLAY', animated_objects, 1080, 1095, 'AUTO', 1,
            function() {
      playSound(loadSound('./sounds/claws_open_close.mp3'), false);

      operateAnimation('PLAY', animated_objects, 1095, 1125, 'AUTO', 1,
              function() {
        registerSetTimeout(0.2, function() {
          playSound(loadSound('./sounds/cylinder_pick.mp3'), false);
        });
        makeParent('verge3d_logo', 'Cylinder');
        makeParent('Cylinder', 'nozzle_pace');
        playSound(loadSound('./sounds/claws_open_close.mp3'), false);

        operateAnimation('PLAY', animated_objects, 1125, 1151, 'AUTO', 1,
                function() {
          makeParent('Cylinder', 'Empty');

          operateAnimation('PLAY', 'Cylinder', 1151, 1160, 'AUTO', 1,
                  function() {}, true, false);


          operateAnimation('PLAY', animated_objects, 1151, 1160, 'AUTO', 1,
                  function() {
            playSound(loadSound('./sounds/claws_open_close.mp3'), false);
            playSound(loadSound('./sounds/cylinder_pick.mp3'), false);
            registerSetTimeout(1, function() {
              makeParent('Cylinder', 'nozzle_pace');
              playSound(loadSound('./sounds/box_popup.mp3'), false);

              operateAnimation('PLAY', animated_objects, 1160, 1225, 'AUTO', 1,
                      function() {
                playSound(loadSound('./sounds/cylinder_drop.mp3'), false);
                playSound(loadSound('./sounds/claws_open_close.mp3'), false);
                makeParent('Cylinder', 'Empty');

                operateAnimation('PLAY', animated_objects, 1225, 1380, 'AUTO', 1,
                        function() {

                  operateAnimation('PLAY', 'Cylinder', 1380, 1381, 'AUTO', 1,
                          function() {}, true, false);


                  operateAnimation('PLAY', animated_objects, 1380, 1423, 'AUTO', 1,
                          function() {
                    playSound(loadSound('./sounds/box_kick.mp3'), false);

                    operateAnimation('PLAY', animated_objects, 1423, 1490, 'AUTO', 1,
                            function() {
                      animation_3_playing = false;
                      ar_animation_index = 0;
                    }, true, false);

                        }, true, false);

                      }, true, false);

                    }, true, false);

                  });
          }, true, false);

              }, true, false);

            }, true, false);

          }, true, false);

        }
}


// isSoundPlaying puzzle
function isSoundPlaying(mediaElem) {
    if (!mediaElem)
        return false;
    return mediaElem.isPlaying();
}



// whenMoved puzzle
function whenMoved(objNames, velocity, cbStart, cbMove, cbStop) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    function savePreviousCoords(objName, obj, prevIsMoving) {
        // GC optimization
        if (_pGlob.objMovementInfos[objName]) {
            var info = _pGlob.objMovementInfos[objName];

            info.prevPosX = obj.position.x;
            info.prevPosY = obj.position.y;
            info.prevPosZ = obj.position.z;
            info.prevRotX = obj.rotation.x;
            info.prevRotY = obj.rotation.y;
            info.prevRotZ = obj.rotation.z;
            info.prevScaX = obj.scale.x;
            info.prevScaY = obj.scale.y;
            info.prevScaZ = obj.scale.z;
            info.prevIsMoving = prevIsMoving;
        } else {
            var info = {
                prevPosX: obj.position.x,
                prevPosY: obj.position.y,
                prevPosZ: obj.position.z,
                prevRotX: obj.rotation.x,
                prevRotY: obj.rotation.y,
                prevRotZ: obj.rotation.z,
                prevScaX: obj.scale.x,
                prevScaY: obj.scale.y,
                prevScaZ: obj.scale.z,
                prevIsMoving: prevIsMoving
            };
            _pGlob.objMovementInfos[objName] = info;
        }

        return info;
    }

    function checkMoving(objName, obj, elapsed) {

        var info = _pGlob.objMovementInfos[objName] ||
            savePreviousCoords(objName, obj, false);

        var delta = velocity * elapsed;

        var isMoving =
            Math.abs(obj.position.x - info.prevPosX) > delta ||
            Math.abs(obj.position.y - info.prevPosY) > delta ||
            Math.abs(obj.position.z - info.prevPosZ) > delta ||
            Math.abs(obj.rotation.x - info.prevRotX) > delta ||
            Math.abs(obj.rotation.y - info.prevRotY) > delta ||
            Math.abs(obj.rotation.z - info.prevRotZ) > delta ||
            Math.abs(obj.scale.x - info.prevScaX) > delta ||
            Math.abs(obj.scale.y - info.prevScaY) > delta ||
            Math.abs(obj.scale.z - info.prevScaZ) > delta;

        if (!info.prevIsMoving && isMoving) {
            cbStart();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && isMoving) {
            cbMove();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && !isMoving) {
            cbStop();
            savePreviousCoords(objName, obj, false);
        } else {
            savePreviousCoords(objName, obj, false);
        }
    }

    function addToRender(objName) {

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        appInstance.renderCallbacks.push(function(elapsed, timeline) { checkMoving(objName, obj, elapsed); });
    }

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName)
            continue;

        addToRender(objName);
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }
    elem.addEventListener("click", function(event) {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    });
    function changeFullscreen() {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter();
        else
            cb_exit();
    }
    doc.addEventListener("webkitfullscreenchange", changeFullscreen);
    doc.addEventListener("mozfullscreenchange", changeFullscreen);
    doc.addEventListener("msfullscreenchange", changeFullscreen);
    doc.addEventListener("fullscreenchange", changeFullscreen);
    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// dragRotate puzzle
function dragRotate(objNames, mode, isParentSpace, blockId, parentDragOverBlockId) {
    if (!appInstance.camera) return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(appInstance.camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}



function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}



/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}



function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}



// whenDraggedOver puzzle
initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverCallbacks.forEach(function(el) {

        var maxIntersects = el[2] ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el[0]], objName)) {
                el[1]({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);



// whenDraggedOver puzzle
function registerOnDrag(objNames, xRay, cbStart, cbMove, cbDrop, blockId) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart();

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove();
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop();
            info.isDowned = false;

            elem.removeEventListener("mousemove", moveCb, false);
            elem.removeEventListener("touchmove", moveCb, false);
            elem.removeEventListener("mouseup", upCb, false);
            elem.removeEventListener("touchend", upCb, false);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener("mousemove", moveCb, false);
        elem.addEventListener("touchmove", moveCb, false);
        elem.addEventListener("mouseup", upCb, false);
        elem.addEventListener("touchend", upCb, false);
    }
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;
        _pGlob.objDragOverCallbacks.push([objName, cb, xRay]);
    }
}



// whenClicked puzzle
function registerOnClick(objNames, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];

    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    // for AR/VR
    _pGlob.objClickInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(objNamesFiltered, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo();
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo();
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// outline puzzle
function outline(objNames, doWhat) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}



// whenHovered puzzle
initObjectPicking(function(intersects) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(el.objNames, objName) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, prevHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1]();
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (objectsIncludeObj(el.objNames, currHovered)) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0]();
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove', false);



// whenHovered puzzle
function registerOnHover(objNames, xRay, cbOver, cbOut) {
    objNames = retrieveObjectNames(objNames) || [];
    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    _pGlob.objHoverInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}



function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.camera);
    return rc.ray.intersectPlane(plane, dest);
}



// dragMove puzzle
function dragMove(objNames, mode, blockId, parentDragOverBlockId) {
    if (!appInstance.camera) return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames) return;

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = appInstance.camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}



// checkVRMode puzzle
function checkVRMode(availableCb, unAvailableCb) {
    // COMPAT: < 2.13.1
    if (v3d.Detector.checkWebXR)
        v3d.Detector.checkWebXR('immersive-vr', availableCb, unAvailableCb);
    else
        appInstance.checkWebXR('immersive-vr', availableCb, unAvailableCb);
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}



_pGlob.getInputSource = function(controller) {
    if (controller && controller.userData.v3d && controller.userData.v3d.inputSource) {
        return controller.userData.v3d.inputSource
    } else {
        return null;
    }
};

_pGlob.traverseNonControllers = function(obj, callback) {

    if (obj.name.startsWith('XR_CONTROLLER_'))
        return;

    callback(obj);

    var children = obj.children;

    for (var i = 0, l = children.length; i < l; i++) {

        _pGlob.traverseNonControllers(children[i], callback);

    }

};

_pGlob.xrGetIntersections = function(controller) {

    controller.updateMatrixWorld(true);

    _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);

    var objList = [];

    _pGlob.traverseNonControllers(appInstance.scene, function(obj) {
        objList.push(obj);
    });

    var raycaster = new v3d.Raycaster();
    raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);

    return raycaster.intersectObjects(objList);

}

_pGlob.xrOnSelect = function(event) {

    var controller = event.target;

    var intersections = _pGlob.xrGetIntersections(controller);

    if (intersections.length > 0) {
        var intersection = intersections[0];
        var obj = intersection.object;

        // save the object for the pickedObject block
        _pGlob.pickedObject = getPickedObjectName(obj);

        _pGlob.objClickInfo.forEach(function(el) {
            var isPicked = obj && objectsIncludeObj(el.objNames, getPickedObjectName(obj));
            el.callbacks[isPicked ? 0 : 1]();
        });
    } else {
        _pGlob.objClickInfo.forEach(function(el) {
            // missed
            el.callbacks[1]();
        });
    }

}



// enterVRMode puzzle
function enterVRMode(refSpace, enterCb, exitCb, unAvailableCb) {

    var DEFAULT_DEPTH = 10;

    var _rayReticleDepth = [];
    var _hoveredObjects = [];

    function onControllerHover() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            var intersections = _pGlob.xrGetIntersections(controller);

            if (intersections.length > 0) {
                var intersection = intersections[0];
                var obj = intersection.object;
                _rayReticleDepth[i] = intersection.distance;
            } else {
                var obj = null;
                _rayReticleDepth[i] = DEFAULT_DEPTH;
            }

            controller.children.forEach(function(child) {
                if (child.name.indexOf('_RAY') > -1) {
                    child.scale.z = _rayReticleDepth[i];
                } else if (child.name.indexOf('_RETICLE') > -1) {
                    // reduces crossing artefacts
                    child.position.z = -0.95 * _rayReticleDepth[i];
                }
            });

            var prevHovered = _hoveredObjects[i];
            var currHovered = obj ? getPickedObjectName(obj) : '';

            if (prevHovered == currHovered) {
                continue;
            }

            // first - all "out" callbacks, then - all "over"
            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, prevHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = prevHovered;
                    el.callbacks[1]();
                }
            });

            _pGlob.objHoverInfo.forEach(function(el) {
                if (objectsIncludeObj(el.objNames, currHovered)) {
                    // ensure the correct value of the hoveredObject block
                    _pGlob.hoveredObject = currHovered;
                    el.callbacks[0]();
                }
            });

            _hoveredObjects[i] = currHovered;
        }
    }

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }

    appInstance.initWebXR('immersive-vr', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            // clicks
            controller.addEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
            });
        }

        // hovers
        if (_pGlob.objHoverInfo.length && appInstance.renderCallbacks.indexOf(onControllerHover) == -1)
            appInstance.renderCallbacks.push(onControllerHover);

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        var cbIdx = appInstance.renderCallbacks.indexOf(onControllerHover);
        if (cbIdx != -1)
            appInstance.renderCallbacks.splice(cbIdx, 1);

        _pGlob.xrSessionAcquired = false;

        exitCb();
    });
}



// checkARMode puzzle
function checkARMode(availableCb, unAvailableCb) {
    // COMPAT: < 2.13.1
    if (v3d.Detector.checkWebXR)
        v3d.Detector.checkWebXR('immersive-ar', availableCb, unAvailableCb);
    else
        appInstance.checkWebXR('immersive-ar', availableCb, unAvailableCb);
}



// arHitPoint puzzle
function arHitPoint(coord) {

    var hitPoint = coordsTransform(_pGlob.vec3Tmp.copy(_pGlob.arHitPoint), 'Y_UP_RIGHT', getCoordSystem());

    if (coord == 'xyz')
        return hitPoint.toArray();
    else
        return hitPoint[coord];
}



// arHitTest puzzle
function arHitTest(cbHit, cbMiss, smooth) {
    appInstance.renderer.xr.arHitTest(0, 0, function(point) {

        smooth = v3d.Math.clamp(smooth, 0, 1);

        var x = point.x;
        var y = point.y;
        var z = point.z;

        _pGlob.arHitPoint.x = _pGlob.arHitPoint.x * smooth + (1 - smooth) * x;
        _pGlob.arHitPoint.y = _pGlob.arHitPoint.y * smooth + (1 - smooth) * y;
        _pGlob.arHitPoint.z = _pGlob.arHitPoint.z * smooth + (1 - smooth) * z;

        cbHit();
    }, cbMiss);
}



// enterARMode puzzle
function enterARMode(refSpace, enterCb, exitCb, unAvailableCb) {

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }


    appInstance.initWebXR('immersive-ar', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.addEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.addEventListener(pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            controller.removeEventListener('select', _pGlob.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                controller.removeEventListener(pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = false;

        exitCb();

    });
}



// isObjectVisible puzzle
function isObjectVisible(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return false;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (obj.visible)
            return true;
    }
    return false;
}



// xrSessionEvent puzzle
function xrSessionEvent(eventType, callback) {

    var eventHandler = function(event) {
        var ctrlObj = event.target;
        // set gamepad index to controller index
        _pGlob.gamepadIndex = appInstance.xrControllers.indexOf(ctrlObj);
        callback();
    }

    _pGlob.xrSessionCallbacks.push([eventType, eventHandler]);

    // register controller event here if executed after XR session acquisition
    if (_pGlob.xrSessionAcquired) {
        appInstance.xrControllers.forEach(function(controller) {
            controller.addEventListener(eventType, eventHandler);
        });
    }

}



all_buttons = ['color_button_0', 'color_button_1', 'color_button_2', 'color_button_3', 'color_mode_button', 'function_button_0', 'function_button_1', 'function_button_2', 'function_button_3', 'reset_pose_button', 'animation_step_1', 'animation_step_2', 'animation_step_3'];

animated_objects = ['instance_1', 'instance_2', 'instance_3', 'instance_4', 'instance_5', 'nozzle_pace', 'claws_armature', 'welding_sparkles', 'box_armature', 'lower_cable_armature', 'upper_cable_armature'];

registerEveryFrame(function() {
  if (mode_type == 'rotating') {
    limits_check();
  }
});

nozzle_dop_limit = 0;
hide_all_buttons();
show_animation_buttons();
mode_type = 'animation';
color_mode = 'multiple';
changeVis('welding_sparkles', false);
nozzles_status = [0, 0, 0];
nozzles_list = ['claws', 'drill', 'drill_bit', 'welding'];
manipulators_list = ['base_rotate', 'base_shift', 'instance_1_rotate', 'instance_2_rotate', 'instance_3_rotate', 'instance_4_rotate', 'instance_5_rotate', 'nozzle_rotate', 'claws_open', 'drill_on_off', 'welding_on', 'ar_warning_text'];
robot_coloring_list = ['instance_1', 'instance_2', 'instance_3', 'instance_4', 'instance_5', 'counterweight'];
robot_parts_list = ['base', 'instance_1', 'instance_2', 'instance_3', 'instance_4', 'instance_5', 'counterweight', 'claws', 'drill', 'welding'];
robot_slected_part = 'none';
changeVis(manipulators_list, false);
nozzle_manipulator_check();
nozzle_installed = 'none';
sounds_volume_mute();
reset_pose();
reset_animations();
registerSetTimeout(0.2, function() {
  sounds_volume_reset();
});

eventHTMLElem('click', 'animation_step_1', true, function(event) {
  animation_step_1();
});

eventHTMLElem('click', 'animation_step_2', true, function(event) {
  animation_step_2();
});

eventHTMLElem('click', 'animation_step_3', true, function(event) {
  animation_step_3();
});

all_sounds_list = [loadSound('./sounds/base_moving_sound.mp3'), loadSound('./sounds/box_kick.mp3'), loadSound('./sounds/box_popup.mp3'), loadSound('./sounds/claws_open_close.mp3'), loadSound('./sounds/cylinder_drop.mp3'), loadSound('./sounds/cylinder_pick.mp3'), loadSound('./sounds/cylinder_popup.mp3'), loadSound('./sounds/drill_on.wav'), loadSound('./sounds/hover_item.mp3'), loadSound('./sounds/instance_1_rotation_sound.mp3'), loadSound('./sounds/instance_2_rotation_sound.mp3'), loadSound('./sounds/instance_3_rotation_sound.mp3'), loadSound('./sounds/instance_4_rotation_sound.mp3'), loadSound('./sounds/instance_5_rotation_sound.mp3'), loadSound('./sounds/nozzle_install.mp3'), loadSound('./sounds/nozzle_rotation_sound.mp3'), loadSound('./sounds/paint_spray.mp3'), loadSound('./sounds/welding.mp3')];
sounds_is_played = false;

whenMoved('base', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/base_moving_sound.mp3')) == false) {
    playSound(loadSound('./sounds/base_moving_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/base_moving_sound.mp3'));
});

eventHTMLElem('click', ['DOCUMENT'], false, function(event) {
  if (sounds_is_played == false) {
    sounds_volume_mute();
    for (var i_index in all_sounds_list) {
      i = all_sounds_list[i_index];
      playSound(i, false);
    }
    registerSetTimeout(0.1, function() {
      for (var i_index2 in all_sounds_list) {
        i = all_sounds_list[i_index2];
        pauseSound(i);
      }
      sounds_is_played = true;
      sounds_volume_reset();
    });
  }
});

whenMoved('instance_1', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/instance_1_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/instance_1_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/instance_1_rotation_sound.mp3'));
});

whenMoved('instance_2', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/instance_2_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/instance_2_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/instance_2_rotation_sound.mp3'));
});

whenMoved('instance_3', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/instance_3_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/instance_3_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/instance_3_rotation_sound.mp3'));
});

whenMoved('instance_4', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/instance_4_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/instance_4_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/instance_4_rotation_sound.mp3'));
});

whenMoved('instance_5', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/instance_5_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/instance_5_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/instance_5_rotation_sound.mp3'));
});

whenMoved('nozzle_pace', 0.001, function() {}, function() {
  if (isSoundPlaying(loadSound('./sounds/nozzle_rotation_sound.mp3')) == false) {
    playSound(loadSound('./sounds/nozzle_rotation_sound.mp3'), true);
  }
}, function() {
  pauseSound(loadSound('./sounds/nozzle_rotation_sound.mp3'));
});

eventHTMLElem('click', 'help_button', true, function(event) {
  if (mode_type == 'animation' && help_visible == 0) {
    setHTMLElemStyle('display', 'block', 'animation_mode_help', true);
    help_visible = 1;
  } else if (mode_type == 'free' && help_visible == 0) {
    setHTMLElemStyle('display', 'block', 'free_mode_help', true);
    help_visible = 1;
  }
});

initFullscreen('fullscreen_button', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(./images/fullscreen-close.png)', 'fullscreen_button', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(./images/fullscreen-open.png)', 'fullscreen_button', true);
}, function() {
  setHTMLElemStyle('visibility', 'hidden', 'fullscreen_button', true);
});

eventHTMLElem('click', 'change_mode_button', true, function(event) {
  if (mode_type == 'animation') {
    mode_type = 'free';
    setHTMLElemAttribute('innerHTML', 'Switch to Animation Mode', 'change_mode_button', true);

    operateAnimation('STOP', animated_objects, null, null, 'AUTO', 1,
            function() {}, undefined, false);

        limits_reset();
    reset_animations();
    reset_pose();
    hide_all_buttons();
    changeVis(manipulators_list, false);
    changeVis(nozzles_list, false);
    if (help_visible == 1) {
      setHTMLElemStyle('display', 'block', 'free_mode_help', true);
      setHTMLElemStyle('display', 'none', 'animation_mode_help', true);
      help_showed = 1;
    } else if (help_showed == 0) {
      registerSetTimeout(0.1, function() {
        setHTMLElemStyle('display', 'block', 'free_mode_help', true);
        help_showed = 1;
      });
    }
    if (isSoundPlaying(loadSound('./sounds/drill_on.wav')) == true) {
      pauseSound(loadSound('./sounds/drill_on.wav'));
    }
  } else if (mode_type == 'free') {
    mode_type = 'animation';
    setHTMLElemAttribute('innerHTML', 'Switch to Free Mode', 'change_mode_button', true);
    limits_reset();
    reset_pose();
    reset_animations();
    hide_all_buttons();
    show_animation_buttons();
    changeVis(manipulators_list, false);
    changeVis(nozzles_list, false);
    robot_slected_part = 'none';
    nozzle_installed = 'none';
    if (help_visible == 1) {
      setHTMLElemStyle('display', 'none', 'free_mode_help', true);
      setHTMLElemStyle('display', 'block', 'animation_mode_help', true);
    }
    if (isSoundPlaying(loadSound('./sounds/drill_on.wav')) == true) {
      pauseSound(loadSound('./sounds/drill_on.wav'));
    }
  }
});

help_showed = 0;
help_visible = 0;
registerSetTimeout(0.1, function() {
  setHTMLElemStyle('display', 'block', 'animation_mode_help', true);
  help_visible = 1;
});

eventHTMLElem('click', 'color_button_3', true, function(event) {
  playSound(loadSound('./sounds/paint_spray.mp3'), false);
  if (color_mode == 'multiple') {
    assignMat(robot_slected_part, 'industrial_robot_blue');
  } else if (color_mode == 'single') {
    assignMat(robot_coloring_list, 'industrial_robot_blue');
  }
});

eventHTMLElem('click', 'color_button_2', true, function(event) {
  playSound(loadSound('./sounds/paint_spray.mp3'), false);
  if (color_mode == 'multiple') {
    assignMat(robot_slected_part, 'industrial_robot_green');
  } else if (color_mode == 'single') {
    assignMat(robot_coloring_list, 'industrial_robot_green');
  }
});

eventHTMLElem('click', 'color_button_0', true, function(event) {
  playSound(loadSound('./sounds/paint_spray.mp3'), false);
  if (color_mode == 'multiple') {
    assignMat(robot_slected_part, 'industrial_robot_yellow');
  } else if (color_mode == 'single') {
    assignMat(robot_coloring_list, 'industrial_robot_yellow');
  }
});

eventHTMLElem('click', 'color_button_1', true, function(event) {
  playSound(loadSound('./sounds/paint_spray.mp3'), false);
  if (color_mode == 'multiple') {
    assignMat(robot_slected_part, 'industrial_robot_orange');
  } else if (color_mode == 'single') {
    assignMat(robot_coloring_list, 'industrial_robot_orange');
  }
});

eventHTMLElem('click', 'function_button_0', true, function(event) {
  if (getObjTransform('instance_3', 'rotation', 'z') <= -160) {
    setObjTransform('instance_3', 'rotation', '', '', -160, false);
  }
  playSound(loadSound('./sounds/nozzle_install.mp3'), false);
  setObjTransform('nozzle_pace', 'rotation', 0, 0, 0, false);
  changeVis(nozzles_list, false);

  operateAnimation('STOP', 'drill_bit', null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', 'drill_on_off', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      pauseSound(loadSound('./sounds/drill_on.wav'));
  changeVis('claws', true);
  nozzle_installed = 'claws';
  nozzle_manipulator_check();
  limits_check();
});

eventHTMLElem('click', 'reset_pose_button', true, function(event) {
  if (mode_type == 'animation') {
    reset_animations();
    hide_all_buttons();
    show_animation_buttons();
    changeVis(nozzles_list, false);

    operateAnimation('STOP', 'Cylinder', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('STOP', 'verge3d_logo', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        snapToObject('Cylinder', 'cylinder_reset_place');
    snapToObject('verge3d_logo', 'verge3d_logo_reset_place');
    makeParent('Cylinder', 'Empty');
    makeParent('verge3d_logo', 'Empty');
  } else if (mode_type == 'free') {
    nozzle_installed = 'none';
    changeVis(nozzles_list, false);
    nozzle_manipulator_check();
    limits_reset();
    reset_pose();
  }
  if (isSoundPlaying(loadSound('./sounds/drill_on.wav')) == true) {
    pauseSound(loadSound('./sounds/drill_on.wav'));
  }
});

eventHTMLElem('click', 'function_button_1', true, function(event) {
  if (getObjTransform('instance_3', 'rotation', 'z') <= -160) {
    setObjTransform('instance_3', 'rotation', '', '', -160, false);
  }
  playSound(loadSound('./sounds/nozzle_install.mp3'), false);
  setObjTransform('nozzle_pace', 'rotation', 0, 0, 0, false);
  changeVis(nozzles_list, false);
  changeVis(['GROUP', 'drill'], true);
  nozzle_installed = 'drill';
  nozzle_manipulator_check();
  limits_check();
});

eventHTMLElem('click', 'function_button_2', true, function(event) {
  if (getObjTransform('instance_3', 'rotation', 'z') <= -160) {
    setObjTransform('instance_3', 'rotation', '', '', -160, false);
  }
  playSound(loadSound('./sounds/nozzle_install.mp3'), false);
  setObjTransform('nozzle_pace', 'rotation', 0, 0, 0, false);
  changeVis(nozzles_list, false);
  changeVis('welding', true);

  operateAnimation('STOP', 'drill_bit', null, null, 'AUTO', 1,
          function() {}, undefined, false);


  operateAnimation('STOP', 'drill_on_off', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      pauseSound(loadSound('./sounds/drill_on.wav'));
  nozzle_installed = 'welding';
  nozzle_manipulator_check();
  limits_check();
});

eventHTMLElem('click', 'free_mode_help_close_button', true, function(event) {
  setHTMLElemStyle('display', 'none', 'free_mode_help', true);
  help_visible = 0;
});

eventHTMLElem('click', 'animation_mode_help_close_button', true, function(event) {
  setHTMLElemStyle('display', 'none', 'animation_mode_help', true);
  help_visible = 0;
});

eventHTMLElem('click', 'function_button_3', true, function(event) {
  robot_slected_part = 'none';
  hide_all_buttons();
  changeVis(manipulators_list, false);
});

eventHTMLElem('click', 'color_mode_button', true, function(event) {
  if (color_mode == 'multiple') {
    color_mode = 'single';
    setHTMLElemStyle('backgroundImage', 'url(./images/single_color_mode.png)', 'color_mode_button', true);
  } else if (color_mode == 'single') {
    color_mode = 'multiple';
    setHTMLElemStyle('backgroundImage', 'url(./images/multiple_color_mode.png)', 'color_mode_button', true);
  }
});

eventHTMLElem('click', 'orange_interface_button', true, function(event) {
  colorizing_interface('manipulator_1_orange', 'manipulator_2_orange', '#f08b2e', 'rgba(240, 139, 46, 0.32)');
});

eventHTMLElem('click', 'blue_interface_button', true, function(event) {
  colorizing_interface('manipulator_1_blue', 'manipulator_2_blue', '#66a9ff', 'rgba(102, 169, 255, .4)');
});

eventHTMLElem('click', 'green_interface_button', true, function(event) {
  colorizing_interface('manipulator_1_green', 'manipulator_2_green', '#65df47', 'rgba(142, 255, 112, 0.4)');
});

eventHTMLElem('click', 'yellow_interface_button', true, function(event) {
  colorizing_interface('manipulator_1_yellow', 'manipulator_2_yellow', '#dada2e', 'rgba(236, 229, 53, 0.28)');
});

registerOnDrag('instance_5_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('instance_5', 'Y', true, '`hD|wNKm8R@x(wWG7!L[', 'knEA{JH$weB~:g%Ogi|z');
}, function() {
  mode_type = 'free';
}, 'knEA{JH$weB~:g%Ogi|z');

registerOnDrag('instance_2_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('instance_2', 'Y', true, '^{O3tUwoNx4ogYhF8@tx', '+9e1z*TZBn:}]nB0X7~Q');
  cables_update();
}, function() {
  mode_type = 'free';
}, '+9e1z*TZBn:}]nB0X7~Q');

registerOnClick(robot_parts_list, false, false, [0,1,2], function() {
  if (mode_type == 'free') {
    manipulators_selection(_pGlob.pickedObject);
    robot_slected_part = _pGlob.pickedObject;
    playSound(loadSound('./sounds/cylinder_pick.mp3'), false);
  }
}, function() {});

registerOnDrag('instance_1_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('instance_1', 'Z', true, 'xE2)a.^e$`6{4Z_vEhSQ', ',[]D:947~rURqx`39]DD');
}, function() {
  mode_type = 'free';
}, ',[]D:947~rURqx`39]DD');

registerOnDrag('base_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('base', 'Z', true, 'Z1U6Csab%C?r3jl_PT2Q', 'WuR^yVfIMJxp@.F%n-i`');
}, function() {
  mode_type = 'free';
}, 'WuR^yVfIMJxp@.F%n-i`');

registerOnHover(robot_parts_list, false, function() {
  if (mode_type == 'free') {
    outline(_pGlob.hoveredObject, 'ENABLE');
    playSound(loadSound('./sounds/hover_item.mp3'), false);
  }
}, function() {
  if (mode_type == 'free') {
    outline(_pGlob.hoveredObject, 'DISABLE');
  }
});

registerOnDrag('base_shift', false, function() {
  mode_type = 'rotating';
}, function() {
  dragMove('base', 'XY', '!~FMTe?LJ;;RZydK$ZkX', 'pf;5y:mX*Cg!Mdp32jV6');
}, function() {
  mode_type = 'free';
}, 'pf;5y:mX*Cg!Mdp32jV6');

registerOnDrag('instance_3_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('instance_3', 'Y', true, '[xa1G,sdP9[,Q0gw(EQz', 'QaQ~%D1h0_cfGh7pO$4W');
  cables_update();
}, function() {
  mode_type = 'free';
}, 'QaQ~%D1h0_cfGh7pO$4W');

registerOnClick('welding_on', false, false, [0,1,2], function() {
  playSound(loadSound('./sounds/welding.mp3'), false);
  changeVis('welding_sparkles', true);

  operateAnimation('PLAY', 'welding_on', 1, 75, 'AUTO', 1,
          function() {}, true, false);


  operateAnimation('PLAY', 'welding_sparkles', 1, 65, 'AUTO', 1,
          function() {
    changeVis('welding_sparkles', false);
  }, true, false);

      }, function() {});

registerOnDrag('nozzle_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('nozzle_pace', 'X', true, 'Q-5[B@~bnn2wLyv%A[`*', '[Rg/h_MnYn46B%K[N*-+');
}, function() {
  mode_type = 'free';
}, '[Rg/h_MnYn46B%K[N*-+');

registerOnDrag('instance_4_rotate', false, function() {
  mode_type = 'rotating';
}, function() {
  dragRotate('instance_4', 'X', true, 'BFgR/3b.V,8@^ruY^=tQ', 'q?[~tD}Oak6ApZfoK4{y');
}, function() {
  mode_type = 'free';
}, 'q?[~tD}Oak6ApZfoK4{y');

registerOnClick('claws_open', false, false, [0,1,2], function() {
  if (nozzles_status[0] == 0) {

    operateAnimation('PLAY', 'claws_armature', 1, 30, 'AUTO', 1,
            function() {
      nozzles_status[0] = 1;
    }, true, false);


    operateAnimation('PLAY', 'claws_open', 1, 30, 'AUTO', 1,
            function() {}, true, false);

        playSound(loadSound('./sounds/claws_open_close.mp3'), false);
  } else if (nozzles_status[0] == 1) {

    operateAnimation('PLAY', 'claws_armature', 1, 30, 'AUTO', 1,
            function() {
      nozzles_status[0] = 0;
    }, true, true);


    operateAnimation('PLAY', 'claws_open', 1, 30, 'AUTO', 1,
            function() {}, true, true);

        playSound(loadSound('./sounds/claws_open_close.mp3'), false);
  }
}, function() {});

registerOnClick('drill_on_off', false, false, [0,1,2], function() {
  if (nozzles_status[1] == 0) {
    playSound(loadSound('./sounds/drill_on.wav'), true);

    operateAnimation('PLAY', 'drill_bit', 1, 30, 'AUTO', 1,
            function() {}, true, false);


    operateAnimation('PLAY', 'drill_on_off', 1, 30, 'AUTO', 1,
            function() {}, true, false);

        nozzles_status[1] = 1;
  } else if (nozzles_status[1] == 1) {
    pauseSound(loadSound('./sounds/drill_on.wav'));

    operateAnimation('STOP', 'drill_bit', null, null, 'AUTO', 1,
            function() {}, undefined, false);


    operateAnimation('STOP', 'drill_on_off', null, null, 'AUTO', 1,
            function() {}, undefined, false);

        nozzles_status[1] = 0;
  }
}, function() {});

volume(loadSound('./sounds/button_push.mp3'), 0.6);
button_1_hovered = false;
button_2_hovered = false;
button_3_hovered = false;
button_1_light = 0;
button_2_light = 0;
button_3_light = 0;
animation_1_playing = false;
animation_2_playing = false;
animation_3_playing = false;

checkVRMode(function() {
  vr_available = true;
}, function() {
  vr_available = false;
});

registerEveryFrame(function() {
  if (button_1_hovered && button_1_light < 2) {
    button_1_light = button_1_light + 0.05;
    setMaterialValue('button_1', 'switcher', button_1_light);
  } else if (!button_1_hovered && button_1_light > 0) {
    button_1_light = button_1_light - 0.1;
    setMaterialValue('button_1', 'switcher', button_1_light);
  }
  if (button_2_hovered && button_2_light < 2) {
    button_2_light = button_2_light + 0.05;
    setMaterialValue('button_2', 'switcher', button_2_light);
  } else if (!button_2_hovered && button_2_light > 0) {
    button_2_light = button_2_light - 0.1;
    setMaterialValue('button_2', 'switcher', button_2_light);
  }
  if (button_3_hovered && button_3_light < 2) {
    button_3_light = button_3_light + 0.05;
    setMaterialValue('button_3', 'switcher', button_3_light);
  } else if (!button_3_hovered && button_3_light > 0) {
    button_3_light = button_3_light - 0.1;
    setMaterialValue('button_3', 'switcher', button_3_light);
  }
  if (button_1_light >= 2 && !isAnimationPlaying('button_1') && !animation_1_playing && !isAnimationPlaying(animated_objects)) {

    operateAnimation('PLAY', 'button_1', null, null, 'LoopOnce', 1,
            function() {}, undefined, false);

        playSound(loadSound('./sounds/button_push.mp3'), false);
    animation_step_1();
  }
  if (button_2_light >= 2 && !isAnimationPlaying('button_2') && !animation_2_playing && !isAnimationPlaying(animated_objects)) {

    operateAnimation('PLAY', 'button_2', null, null, 'LoopOnce', 1,
            function() {}, undefined, false);

        playSound(loadSound('./sounds/button_push.mp3'), false);
    animation_step_2();
  }
  if (button_3_light >= 2 && !isAnimationPlaying('button_3') && !animation_3_playing && !isAnimationPlaying(animated_objects)) {

    operateAnimation('PLAY', 'button_3', null, null, 'LoopOnce', 1,
            function() {}, undefined, false);

        playSound(loadSound('./sounds/button_push.mp3'), false);
    animation_step_3();
  }
});

eventHTMLElem('click', 'enter_vr_button', true, function(event) {
  if (vr_available) {
    enterVRMode('SITTING', function() {
      reset_pose();
      changeVis(['GROUP', 'pult_du'], true);
      snapToObject('Camera', 'camera_parent');
      makeParent('Camera', 'camera_parent');
    }, function() {
      reset_pose();
      changeVis(['GROUP', 'pult_du'], false);
      makeParent('Camera', '');
    }, function() {});
  } else {
    setHTMLElemAttribute('innerHTML', 'Please connect your VR device', 'vr_ar_warning_text', true);
    setHTMLElemStyle('display', 'block', 'vr_warning_block', true);
    registerSetTimeout(3, function() {
      setHTMLElemStyle('display', 'none', 'vr_warning_block', true);
    });
  }
});

registerOnHover('button_1', false, function() {
  button_1_hovered = true;
}, function() {
  button_1_hovered = false;
});

registerOnHover('button_2', false, function() {
  button_2_hovered = true;
}, function() {
  button_2_hovered = false;
});

registerOnHover('button_3', false, function() {
  button_3_hovered = true;
}, function() {
  button_3_hovered = false;
});

checkARMode(function() {
  ar_available = true;
}, function() {
  ar_available = false;
});

ar_animation_index = 0;
ar_mode_on = false;
ar_base_fixed = false;
eventHTMLElem('click', 'enter_ar_button', true, function(event) {
  if (ar_available) {
    enterARMode('SITTING', function() {
      setObjTransform('base', 'position', '', '', 1000, false);
      changeVis('environment', false);
      arHitTest(function() {
        changeVis('base', true);
        if (!ar_base_fixed) {
          setObjTransform('base', 'position', arHitPoint('x'), arHitPoint('y'), arHitPoint('z'), false);
        }
      }, function() {
        changeVis('base', false);
        changeVis('ar_warning_text', true);
        registerSetTimeout(3, function() {
          changeVis('ar_warning_text', false);
        });
      }, 0.7);
    }, function() {
      changeVis('environment', true);
      reset_pose();
    }, function() {});
  } else {
    setHTMLElemAttribute('innerHTML', 'Please connect your AR device', 'vr_ar_warning_text', true);
    setHTMLElemStyle('display', 'block', 'vr_warning_block', true);
    registerSetTimeout(3, function() {
      setHTMLElemStyle('display', 'none', 'vr_warning_block', true);
    });
  }
});

xrSessionEvent('select', function(event) {
  if (isObjectVisible('base')) {
    ar_base_fixed = true;
  }
});

registerOnClick(['base', 'instance_1', 'instance_2', 'instance_3', 'instance_4', 'instance_5', 'counterweight'], false, false, [0,1,2], function() {
  if (ar_base_fixed) {
    if (ar_animation_index == 0) {
      animation_step_1();
    } else if (ar_animation_index == 1) {
      animation_step_2();
    } else if (ar_animation_index == 2) {
      animation_step_3();
    }
  }
}, function() {});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
