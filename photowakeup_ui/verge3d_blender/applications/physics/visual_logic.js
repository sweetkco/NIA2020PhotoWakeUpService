/**
 * Generated by Verge3D Puzzles v.3.5.0 pre2
 * Fri Nov 13 2020 20:14:52 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};


    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["shoot"] = shoot;

var PROC = {
    "shoot": shoot,
};

var camDir, clonedBall;


// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}




// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




/**
 * Find physics body associated with the given object and remove it.
 */
_pPhysics.findRemovePhysicsBody = function(obj) {

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];

        if (syncData.obj == obj) {

            if (syncData.type == 'SOFT_BODY')
                _pPhysics.world.removeSoftBody(syncData.body);
            else
                _pPhysics.world.removeRigidBody(syncData.body);

            Ammo.destroy(syncData.body);
            _pPhysics.syncList.splice(i, 1);
            i--;
        }
    }
}

/**
 * Find physics constraint associated with the given objects and remove it.
 */
_pPhysics.findRemovePhysicsConstraint = function(obj1, obj2) {

    for (var i = 0; i < _pPhysics.consList.length; i++) {

        var consData = _pPhysics.consList[i];

        if (consData.obj1 == obj1 && consData.obj2 == obj2) {

            _pPhysics.world.removeConstraint(consData.cons);
            Ammo.destroy(consData.cons);
            _pPhysics.consList.splice(i, 1);
            i--;

        }

    }

}

/**
 * Cleanup forces and velocities
 */
_pPhysics.resetBody = function(body) {
    body.clearForces();

    var zeroVec = new Ammo.btVector3(0, 0, 0);

    body.setLinearVelocity(zeroVec);
    body.setAngularVelocity(zeroVec);
}

_pPhysics.setObjToBodyTransform = function(obj, body) {
    var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
    var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

    _pPhysics.transTmp.setIdentity();
    _pPhysics.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
    _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

    body.setWorldTransform(_pPhysics.transTmp);
    body.getMotionState().setWorldTransform(_pPhysics.transTmp);
}



// createPhysicsBody puzzle
function createPhysicsBody(type, objNames, shape, mass) {

    if (!window.Ammo)
        return;

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        _pPhysics.findRemovePhysicsBody(obj);

        switch (shape) {
        case 'BOX':
        case 'CAPSULE':
        case 'CONE':
        case 'CYLINDER':

            var box = new v3d.Box3();

            obj.resolveMultiMaterial().forEach(function(objR) {
                if (objR.geometry) {
                    if (objR.geometry.boundingBox == null)
                        objR.geometry.computeBoundingBox();

                    box.union(objR.geometry.boundingBox);
                }
            });

            var size = box.getSize(new v3d.Vector3());

            // do not allow empty-sized shapes
            size.x = size.x || 0.5;
            size.y = size.y || 0.5;
            size.z = size.z || 0.5;

            if (shape == 'BOX') {
                var geometry = new Ammo.btBoxShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            } else if (shape == 'CAPSULE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y - 2 * radius;
                var geometry = new Ammo.btCapsuleShape(radius, height);
            } else if (shape == 'CONE') {
                var radius = Math.max(size.x, size.z) * 0.5;
                var height = size.y;
                var geometry = new Ammo.btConeShape(radius, height);
            } else {
                var geometry = new Ammo.btCylinderShape(new Ammo.btVector3(
                        size.x * 0.5, size.y * 0.5, size.z * 0.5));
            }

            break;
        case 'SPHERE':

            var sphere = new v3d.Sphere();

            obj.resolveMultiMaterial().forEach(function(objR) {

                if (objR.geometry) {
                    if (objR.geometry.boundingSphere === null)
                        objR.geometry.computeBoundingSphere();

                    sphere.union(objR.geometry.boundingSphere);
                }
            });

            var geometry = new Ammo.btSphereShape(sphere.radius || 0.5);

            break;
        case 'MESH':

            var objsR = obj.resolveMultiMaterial();

            if (!objsR[0].geometry || !objsR[0].isMesh) {
                console.error('create rigid body: incorrect mesh object');
                var geometry = new Ammo.btEmptyShape();
                break;
            }

            // allow complex triangle shapes for KINEMATIC objects
            if (type == 'DYNAMIC' || type == 'GHOST') {

                var geometry = new Ammo.btConvexHullShape();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;

                    for (var i = 0; i < positions.length; i+=3) {
                        var x = positions[i];
                        var y = positions[i+1];
                        var z = positions[i+2];

                        var v = new Ammo.btVector3(x, y, z);

                        geometry.addPoint(v);

                        Ammo.destroy(v);
                    }
                });

            } else {

                var triIdxVertArray = new Ammo.btTriangleMesh();

                objsR.forEach(function(objR) {
                    var positions = objR.geometry.attributes.position.array;
                    var indices = objR.geometry.index.array;

                    for (var i = 0; i < indices.length; i+=3) {

                        var i1 = indices[i];
                        var i2 = indices[i+1];
                        var i3 = indices[i+2];

                        var v1 = new Ammo.btVector3(positions[3*i1], positions[3*i1+1], positions[3*i1+2]);
                        var v2 = new Ammo.btVector3(positions[3*i2], positions[3*i2+1], positions[3*i2+2]);
                        var v3 = new Ammo.btVector3(positions[3*i3], positions[3*i3+1], positions[3*i3+2]);

                        triIdxVertArray.addTriangle(v1, v2, v3, false);

                        Ammo.destroy(v1);
                        Ammo.destroy(v2);
                        Ammo.destroy(v3);
                    }
                });

                var geometry = new Ammo.btBvhTriangleMeshShape(triIdxVertArray, true);

            }

            break;
        case 'EMPTY':
            var geometry = new Ammo.btEmptyShape();
            break;
        }

        var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
        var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

        var transform = new Ammo.btTransform();
        transform.setIdentity();
        transform.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        transform.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));
        var motionState = new Ammo.btDefaultMotionState(transform);

        if (type == 'STATIC' || type == 'KINEMATIC' || type == 'GHOST')
            var bodyMass = 0;
        else
            var bodyMass = mass;

        var localInertia = new Ammo.btVector3(0, 0, 0);
        geometry.calculateLocalInertia(bodyMass, localInertia);

        var rbInfo = new Ammo.btRigidBodyConstructionInfo(bodyMass, motionState, geometry, localInertia);
        var body = new Ammo.btRigidBody(rbInfo);

        // CF_STATIC_OBJECT is set automatically

        if (type == 'KINEMATIC' || type == 'GHOST') {
            body.setCollisionFlags(body.getCollisionFlags() | CF_KINEMATIC_OBJECT);
            body.setActivationState(DISABLE_DEACTIVATION);
        }

        if (type == 'GHOST') {

            body.setCollisionFlags(body.getCollisionFlags() | CF_NO_CONTACT_RESPONSE);
            _pPhysics.world.addRigidBody(body, SensorTrigger, AllFilter);

        } else {

            _pPhysics.world.addRigidBody(body);

        }


        //body.setDamping(0.1, 0.1);

        _pPhysics.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: mass
        });

        // external physics interface
        if (v3d.PL) {
            v3d.PL.physics.bodies[objName] = body;
        }
    });


}



// createSoftBody puzzle
function createSoftBody(objNames, shape, mass, pressure) {

    if (!window.Ammo)
        return;

    if (!_pPhysics.softBodyHelpers) {
        console.error('create soft body: please activate soft body on the physics world');
        return;
    }

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;


    function processGeometry(bufGeometry) {

        // Ony consider the position values when merging the vertices
        var posOnlyBufGeometry = new v3d.BufferGeometry();
        posOnlyBufGeometry.setAttribute('position', bufGeometry.getAttribute('position'));
        posOnlyBufGeometry.setIndex(bufGeometry.getIndex());

        // Merge the vertices so the triangle soup is converted to indexed triangles
        var indexedBufferGeom = v3d.BufferGeometryUtils.mergeVertices(posOnlyBufGeometry);

        // Create index arrays mapping the indexed vertices to bufGeometry vertices
        mapIndices(bufGeometry, indexedBufferGeom);

    }

    function isEqual(x1, y1, z1, x2, y2, z2) {

        //var delta = 0.000001;
        var delta = 0.001;
        return Math.abs(x2 - x1) < delta &&
        Math.abs(y2 - y1) < delta &&
        Math.abs(z2 - z1) < delta;

    }

    function mapIndices(bufGeometry, indexedBufferGeom) {

        // Creates ammoVertices, ammoIndices and ammoIndexAssociation in bufGeometry

        var vertices = bufGeometry.attributes.position.array;
        var idxVertices = indexedBufferGeom.attributes.position.array;
        var indices = indexedBufferGeom.index.array;

        var numIdxVertices = idxVertices.length / 3;
        var numVertices = vertices.length / 3;

        bufGeometry.ammoVertices = idxVertices;
        bufGeometry.ammoIndices = indices;
        bufGeometry.ammoIndexAssociation = [];

        for (var i = 0; i < numIdxVertices; i++) {

            var association = [];
            bufGeometry.ammoIndexAssociation.push(association);

            var i3 = i * 3;

            for (var j = 0; j < numVertices; j ++) {

                var j3 = j * 3;
                if (isEqual(idxVertices[i3], idxVertices[i3 + 1], idxVertices[i3 + 2],
                        vertices[j3], vertices[j3 + 1], vertices[j3 + 2])) {

                    association.push(j3);

                }

            }

        }

    }

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        _pPhysics.findRemovePhysicsBody(obj);

        var bufferGeom = obj.geometry;

        if (shape == 'ROPE') {
            mapIndices(bufferGeom, obj.userData.originalLineGeom);

            bufferGeom.ammoNeedNormals = false;

            var nodes = bufferGeom.ammoVertices;
            var nNodes = nodes.length / 3;

            var softBody = new Ammo.btSoftBody(_pPhysics.world.getWorldInfo());

            for (var i = 0; i < nNodes; i++) {
                softBody.appendNode(new Ammo.btVector3(nodes[3*i], nodes[3*i+1], nodes[3*i+2]), 1.0);
            }

            for (var i = 1; i < nNodes; i++) {
                softBody.appendLink(i-1, i, false);
            }

            var sbConfig = softBody.get_m_cfg();
            sbConfig.set_viterations(10);
            sbConfig.set_piterations(10);

        } else if (shape == 'PATCH') {
            processGeometry(bufferGeom);

            bufferGeom.ammoNeedNormals = true;

            var ammoVertices = bufferGeom.ammoVertices;
            var softBody = new Ammo.btSoftBody(_pPhysics.world.getWorldInfo());

            for (var i = 0; i < ammoVertices.length / 3; i++) {
                softBody.appendNode(new Ammo.btVector3(ammoVertices[3*i], ammoVertices[3*i+1], ammoVertices[3*i+2]), 1.0);
            }

            var ammoVertices = bufferGeom.ammoVertices;
            var ammoIndices = bufferGeom.ammoIndices;

            for (var i = 0; i < ammoIndices.length; i+=3) {
                var ind0 = ammoIndices[i];
                var ind1 = ammoIndices[i+1];
                var ind2 = ammoIndices[i+2];

                softBody.appendLink(ind0, ind1, false);
                softBody.appendLink(ind0, ind2, false);
                softBody.appendLink(ind1, ind2, false);

                softBody.appendFace(ind0, ind1, ind2);
            }

            var sbConfig = softBody.get_m_cfg();
            sbConfig.set_viterations(10);
            sbConfig.set_piterations(10);

            // Soft-soft and soft-rigid collisions
            sbConfig.set_collisions(0x11);

        } else {
            processGeometry(bufferGeom);

            bufferGeom.ammoNeedNormals = true;

            var softBody = _pPhysics.softBodyHelpers.CreateFromTriMesh(
                  _pPhysics.world.getWorldInfo(),
                  bufferGeom.ammoVertices,
                  bufferGeom.ammoIndices,
                  bufferGeom.ammoIndices.length / 3,
                  true);

            var sbConfig = softBody.get_m_cfg();
            sbConfig.set_viterations(40);
            sbConfig.set_piterations(40);

            // Soft-soft and soft-rigid collisions
            sbConfig.set_collisions(0x11);

            // Friction
            sbConfig.set_kDF(0.1);

            // Damping
            sbConfig.set_kDP(0.01);

            // Pressure
            sbConfig.set_kPR(pressure);

            // Stiffness
            softBody.get_m_materials().at(0).set_m_kLST(0.9);
            softBody.get_m_materials().at(0).set_m_kAST(0.9);
        }

        softBody.setTotalMass(mass, false);

        var margin = 0.05;
        Ammo.castObject(softBody, Ammo.btCollisionObject).getCollisionShape().setMargin(margin);


        // apply and reset initial object transform

        var pos = obj.getWorldPosition(_pGlob.vec3Tmp);
        var quat = obj.getWorldQuaternion(_pGlob.quatTmp);

        _pPhysics.transTmp.setIdentity();
        _pPhysics.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
        _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

        softBody.transform(_pPhysics.transTmp);

        obj.position.set(0, 0, 0);
        obj.quaternion.set(0, 0, 0, 1);

        _pPhysics.world.addSoftBody(softBody, 1, -1);

        _pPhysics.syncList.push({
            obj: obj,
            body: softBody,
            type: 'SOFT_BODY',
            simulated: true,
            mass: mass
        });

        // external physics interface
        if (v3d.PL) {
            v3d.PL.physics.bodies[objName] = softBody;
        }

    });


}



// createVector puzzle
function createVector(x, y, z) {
    return [x, y, z];
};




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// physicsBodyApplyParam puzzle
function physicsBodyApplyParam(type, objNames, param) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    if (Array.isArray(param)) {
        var vec = _pGlob.vec3Tmp.fromArray(param);
        var noSignChange = (type == 'LINEAR_FACTOR' || type == 'ANGULAR_FACTOR');
        coordsTransform(vec, getCoordSystem(), 'Y_UP_RIGHT', noSignChange);
    }

    objNames.forEach(function(objName) {
        if (!objName)
            return;

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        var btVec;

        for (var i = 0; i < _pPhysics.syncList.length; i++) {
            var syncData = _pPhysics.syncList[i];

            if (syncData.obj == obj) {

                var body = syncData.body;

                if (Array.isArray(param))
                    btVec = new Ammo.btVector3(vec.x, vec.y, vec.z);
                else if (type == 'GRAVITY')
                    btVec = new Ammo.btVector3(0, 0, 0);

                switch (type) {
                case 'ANGULAR_DAMPING':
                    body.setDamping(body.getLinearDamping(), param);
                    break;
                case 'ANGULAR_FACTOR':
                    body.setAngularFactor(btVec);
                    break;
                case 'ANGULAR_VELOCITY':
                    body.setAngularVelocity(btVec);
                    break;
                case 'FORCE':
                    body.applyCentralForce(btVec);
                    break;
                case 'FRICTION':
                    if (syncData.type != 'SOFT_BODY') {
                        body.setFriction(param);
                    } else {
                        var sbConfig = body.get_m_cfg();
                        sbConfig.set_kDF(param);
                    }
                    break;
                case 'GRAVITY':
                    if (Array.isArray(param)) {
                        body.setGravity(btVec);
                    } else {
                        btVec.setY(-param);
                        body.setGravity(btVec);
                    }
                    break;
                case 'IMPULSE':
                    body.applyCentralImpulse(btVec);
                    break;
                case 'LINEAR_DAMPING':
                    if (syncData.type != 'SOFT_BODY') {
                        body.setDamping(param, body.getAngularDamping());
                    } else {
                        var sbConfig = body.get_m_cfg();
                        sbConfig.set_kDP(param);
                    }
                    break;
                case 'LINEAR_FACTOR':
                    body.setLinearFactor(btVec);
                    break;
                case 'LINEAR_VELOCITY':
                    body.setLinearVelocity(btVec);
                    break;
                case 'POSITION':
                    _pPhysics.transTmp.setIdentity();
                    _pPhysics.transTmp.setOrigin(btVec);

                    var quat = obj.quaternion;
                    _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

                    body.setWorldTransform(_pPhysics.transTmp);
                    break;
                case 'RESTITUTION':
                    body.setRestitution(param);
                    break;
                case 'STIFFNESS':
                    if (syncData.type == 'SOFT_BODY') {
                        body.get_m_materials().at(0).set_m_kLST(param);
                        body.get_m_materials().at(0).set_m_kAST(param);
                    } else {
                        console.error('apply body param: Stiffness param is not applicable for rigid bodies');
                    }
                    break;
                case 'TORQUE':
                    body.applyTorque(btVec);
                    break;
                case 'TORQUE_IMPULSE':
                    body.applyTorqueImpulse(btVec);
                    break;
                }

                if (btVec)
                    Ammo.destroy(btVec);
            }
        }

    });


}



function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.v3d.puzzles === undefined) {
            obj.userData.v3d.puzzles = {}
        }
        if (obj.userData.v3d.puzzles.rotationInterface === undefined) {
            obj.userData.v3d.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.v3d.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});




// getObjTransform puzzle
function getObjTransform(objName, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);
    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);
    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}



// addPhysicsConstraint puzzle
function addPhysicsConstraint(obj1, obj2, type, pivot, axis, stiffness, damping) {
    if (!obj1 || !obj2)
        return;

    var obj1 = getObjectByName(obj1);
    var obj2 = getObjectByName(obj2);
    if (!obj1 || !obj2)
        return;

    _pPhysics.findRemovePhysicsConstraint(obj1, obj2);

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData1 = _pPhysics.syncList[i];

        if (syncData1.obj == obj1) {
            for (var j = 0; j < _pPhysics.syncList.length; j++) {
                var syncData2 = _pPhysics.syncList[j];

                if (syncData2.obj == obj2) {

                    var pivot1 = _pGlob.vec3Tmp.fromArray(pivot);
                    pivot1 = coordsTransform(pivot1, getCoordSystem(), 'Y_UP_RIGHT');

                    var pivot2 = _pGlob.vec3Tmp2.copy(pivot1)

                    obj1.worldToLocal(pivot1);
                    obj2.worldToLocal(pivot2);

                    var btPivot1 = new Ammo.btVector3(pivot1.x, pivot1.y, pivot1.z);
                    var btPivot2 = new Ammo.btVector3(pivot2.x, pivot2.y, pivot2.z);

                    var axis1 = _pGlob.vec3Tmp.fromArray(axis);
                    axis1 = coordsTransform(axis1, getCoordSystem(), 'Y_UP_RIGHT');

                    var axis2 = _pGlob.vec3Tmp2.copy(axis1)

                    axis1 = axis1.applyMatrix4(_pGlob.mat4Tmp.copy(obj1.matrixWorld).transpose());
                    axis2 = axis2.applyMatrix4(_pGlob.mat4Tmp.copy(obj2.matrixWorld).transpose());

                    var btAxis1 = new Ammo.btVector3(axis1.x, axis1.y, axis1.z);
                    var btAxis2 = new Ammo.btVector3(axis2.x, axis2.y, axis2.z);

                    var body1 = syncData1.body;
                    var body2 = syncData2.body;

                    switch (type) {
                        case 'HINGE':
                            var cons = new Ammo.btHingeConstraint(body1, body2, btPivot1, btPivot2, btAxis1, btAxis2, true);
                            break;
                        case 'BALL':
                            var cons = new Ammo.btPoint2PointConstraint(body1, body2, btPivot1, btPivot2);
                            break;
                        case 'SLIDER':
                            var trans1 = _pPhysics.transTmp;
                            trans1.setIdentity();
                            trans1.setOrigin(btPivot1);

                            var trans2 = _pPhysics.transTmp2;
                            trans2.setIdentity();
                            trans2.setOrigin(btPivot2);

                            var cons = new Ammo.btSliderConstraint(body1, body2, trans1, trans2, true);
                            break;

                        case 'SPRING':
                            var trans1 = _pPhysics.transTmp;
                            trans1.setIdentity();
                            trans1.setOrigin(btPivot1);

                            var trans2 = _pPhysics.transTmp2;
                            trans2.setIdentity();
                            trans2.setOrigin(btPivot2);

                            var cons = new Ammo.btGeneric6DofSpringConstraint(body1, body2, trans1, trans2, true);

                            // no limits
                            cons.setLinearUpperLimit(new Ammo.btVector3(-1.0, -1.0, -1.0));
                            cons.setLinearLowerLimit(new Ammo.btVector3(1.0, 1.0, 1.0));

                            // no rotation
                            cons.setAngularLowerLimit(new Ammo.btVector3(0.0, 0.0, 0));
                            cons.setAngularUpperLimit(new Ammo.btVector3(0.0, 0.0, 0));

                            cons.enableSpring(0, true);
                            cons.enableSpring(1, true);
                            cons.enableSpring(2, true);
                            cons.setStiffness(0, stiffness);
                            cons.setStiffness(1, stiffness);
                            cons.setStiffness(2, stiffness);
                            cons.setDamping(0, damping);
                            cons.setDamping(1, damping);
                            cons.setDamping(2, damping);

                            cons.setEquilibriumPoint();

                            break;

                        case 'FIXED':
                            var trans1 = _pPhysics.transTmp;
                            var transMat = _pGlob.mat4Tmp.getInverse(obj1.matrixWorld).multiply(obj2.matrixWorld);
                            trans1.setFromOpenGLMatrix(transMat.elements);

                            var trans2 = _pPhysics.transTmp2;
                            trans2.setIdentity();

                            var cons = new Ammo.btFixedConstraint(body1, body2, trans1, trans2);
                            break;
                    }

                    _pPhysics.world.addConstraint(cons, true);

                    _pPhysics.consList.push({
                        cons: cons,
                        obj1: obj1,
                        obj2: obj2,
                        body1: body1,
                        body2: body2
                    });

                    if (v3d.PL) {
                        v3d.PL.physics.constraints[obj1.name] = v3d.PL.physics.constraints[obj1.name] || {};
                        v3d.PL.physics.constraints[obj1.name][obj2.name] = cons;
                    }

                }
            }
        }
    }
}




function initGetCameraDirection() {
    var coordsCallback = function(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
    }

    var elem = appInstance.container;
    elem.addEventListener('mousemove', coordsCallback);
    elem.addEventListener('mousedown', coordsCallback);
    elem.addEventListener('mouseup', coordsCallback);
    elem.addEventListener('touchstart', coordsCallback);
    elem.addEventListener('touchend', coordsCallback);

};

initGetCameraDirection();




// getCameraDirection puzzle
var getCameraDirection = function() {

    var coords = new v3d.Vector2();
    var raycaster = new v3d.Raycaster();
    var vec = new v3d.Vector3();

    return function getCameraDirection(useMouseTouch, inverted) {
        var camera = appInstance.camera;

        if (useMouseTouch) {

            if (inverted) {
                coords.x = -_pGlob.screenCoords.x;
                coords.y = -_pGlob.screenCoords.y;
            } else {
                coords.x = _pGlob.screenCoords.x;
                coords.y = _pGlob.screenCoords.y;
            }

            raycaster.setFromCamera(coords, camera);
            var dir = raycaster.ray.direction;

        } else {
            var dir = camera.getWorldDirection(vec);
        }

        return coordsTransform(dir, 'Y_UP_RIGHT', getCoordSystem()).toArray();
    }
}();



// cloneObject puzzle
function findUniqueObjectName(name) {
    function objNameUsed(name) {
        return Boolean(getObjectByName(name));
    }
    while (objNameUsed(name)) {
        var r = name.match(/^(.*?)(\d+)$/);
        if (!r) {
            name += "2";
        } else {
            name = r[1] + (parseInt(r[2], 10) + 1);
        }
    }
    return name;
}



// cloneObject puzzle
function cloneObject(objName) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var newObj = obj.clone();
    newObj.name = findUniqueObjectName(obj.name);
    appInstance.scene.add(newObj);
    return newObj.name;
}



// snapBody puzzle
function snapBody(objName, targetObjName) {
    if (!objName || !targetObjName)
        return;

    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];

        if (syncData.obj == obj) {

            // snap verge3d object itself
            obj.copyTransform(targetObj);

            _pPhysics.setObjToBodyTransform(obj, syncData.body);

        }
    }
}



// setVectorValue puzzle
function setVectorValue(vector, valueName, value) {
    switch (valueName) {
    case 'X':
        vector[0] = value;
        break;
    case 'Y':
        vector[1] = value;
        break;
    case 'Z':
        vector[2] = value;
        break;
    case 'LENGTH':
        _pGlob.vec3Tmp.fromArray(vector).setLength(value).toArray(vector);
        break;
    }
}


// Describe this function...
function shoot() {
  camDir = getCameraDirection(true, false);
  clonedBall = cloneObject('Ball');
  createPhysicsBody('DYNAMIC', clonedBall, 'SPHERE', 0.5);
  snapBody(clonedBall, 'Camera');
  setVectorValue(camDir, 'LENGTH', 20);
  physicsBodyApplyParam('IMPULSE', clonedBall, camDir);
}


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// softBodyAnchor puzzle
function softBodyAnchor(objName, targetObjName, at) {
    if (!objName || !targetObjName)
        return;

    var obj = getObjectByName(objName);
    var targetObj = getObjectByName(targetObjName);
    if (!obj || !targetObj)
        return;

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];

        if (syncData.obj == obj) {
            for (var j = 0; j < _pPhysics.syncList.length; j++) {
                var syncDataTarget = _pPhysics.syncList[j];

                if (syncDataTarget.obj == targetObj) {

                    // find soft body node closest to the given point
                    if (Array.isArray(at)) {

                        var at = _pGlob.vec3Tmp.fromArray(at);
                        at = coordsTransform(at, getCoordSystem(), 'Y_UP_RIGHT');
                        obj.worldToLocal(at);

                        var positions = obj.geometry.ammoVertices;
                        var closestDistSq = Infinity;
                        var nodeIndex = 0;

                        for (var k = 0; k < positions.length/3; k++) {

                            var p = _pGlob.vec3Tmp2.set(positions[3*k], positions[3*k+1], positions[3*k+2]);
                            var dist = p.distanceToSquared(at);

                            if (dist < closestDistSq) {
                                closestDistSq = dist;
                                nodeIndex = k;
                            }
                        }

                        at = nodeIndex;
                    }

                    syncData.body.appendAnchor(at, syncDataTarget.body, true, 1.0);

                }
            }
        }
    }
}




// createPhysicsWorld puzzle

// TEMPORARY MEASURE TO PREVENT CRASH [TODO]
if (window.Ammo) {

var CF_STATIC_OBJECT = 1;
var CF_KINEMATIC_OBJECT = 2;
var CF_NO_CONTACT_RESPONSE = 4;

var ACTIVE_TAG = 1;
var ISLAND_SLEEPING = 2;
var DISABLE_DEACTIVATION = 4;
var DISABLE_SIMULATION = 5;

var RO_XYZ = 0;

// collision filter groups
var DefaultFilter = 1;
var StaticFilter = 2;
var KinematicFilter = 4;
var DebrisFilter = 8;
var SensorTrigger = 16;
var CharacterFilter = 32;
var AllFilter = -1;

if (true) {

    _pPhysics.collisionConfiguration = new Ammo.btSoftBodyRigidBodyCollisionConfiguration();
    _pPhysics.dispatcher = new Ammo.btCollisionDispatcher(_pPhysics.collisionConfiguration);
    _pPhysics.broadphase = new Ammo.btDbvtBroadphase();
    _pPhysics.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pPhysics.softBodySolver = new Ammo.btDefaultSoftBodySolver();
    _pPhysics.world = new Ammo.btSoftRigidDynamicsWorld(_pPhysics.dispatcher, _pPhysics.broadphase,
            _pPhysics.solver, _pPhysics.collisionConfiguration, _pPhysics.softBodySolver);
    _pPhysics.world.getWorldInfo().set_m_gravity(new Ammo.btVector3(0, -9.8, 0));

    _pPhysics.softBodyHelpers = new Ammo.btSoftBodyHelpers();

} else {

    _pPhysics.collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
    _pPhysics.dispatcher = new Ammo.btCollisionDispatcher(_pPhysics.collisionConfiguration);
    _pPhysics.broadphase = new Ammo.btDbvtBroadphase();
    _pPhysics.solver = new Ammo.btSequentialImpulseConstraintSolver();
    _pPhysics.world = new Ammo.btDiscreteDynamicsWorld(_pPhysics.dispatcher, _pPhysics.broadphase,
            _pPhysics.solver, _pPhysics.collisionConfiguration);

}

_pPhysics.world.setGravity( new Ammo.btVector3( 0, -9.8, 0 ) );
_pPhysics.fps = 60;
_pPhysics.transTmp = new Ammo.btTransform();
_pPhysics.transTmp2 = new Ammo.btTransform();

// external physics interface
if (v3d.PL) {
    v3d.PL.physics = v3d.PL.physics || {};
    v3d.PL.physics.world = _pPhysics.world;
    v3d.PL.physics.bodies = {};
    v3d.PL.physics.constraints = {};
    v3d.PL.physics.addToSyncList = function(obj, body, type) {
        _pPhysics.syncList.push({
            obj: obj,
            body: body,
            type: type,
            simulated: true,
            mass: (body.getInvMass() !==0) ? 1.0/body.getInvMass() : 0
        });
        v3d.PL.physics.bodies[obj.name] = body;
    }
    v3d.PL.physics.removeFromSyncList = function(obj, body) {
        _pPhysics.findRemovePhysicsBody(obj);
        delete v3d.PL.physics.bodies[obj.name];
    }
}

function tick(dt) {

    var DISTANCE_EPSILON = 0.000001;

    if (_pPhysics.collisionData.length) {

        var numManifolds = _pPhysics.world.getDispatcher().getNumManifolds();

        for (var i = 0; i < numManifolds; i++) {
            var contactManifold = _pPhysics.world.getDispatcher().getManifoldByIndexInternal(i);

            var bodyA = Ammo.castObject(contactManifold.getBody0(), Ammo.btRigidBody);
            var bodyB = Ammo.castObject(contactManifold.getBody1(), Ammo.btRigidBody);

            var collDataMatch = null;
            var objsSwapped = false;

            for (var j = 0; j < _pPhysics.collisionData.length; j++) {
                var cd = _pPhysics.collisionData[j];

                if (cd.bodyA == bodyA && cd.bodyB == bodyB) {
                    collDataMatch = cd;
                    break;
                }

                if (cd.bodyA == bodyB && cd.bodyB == bodyA) {
                    collDataMatch = cd;
                    objsSwapped = true;
                    break;
                }
            }

            if (!collDataMatch)
                continue;

            var numContacts = contactManifold.getNumContacts();

            for (var j = 0; j < numContacts; j++) {
                var pt = contactManifold.getContactPoint(j);

                if (pt.getDistance() < DISTANCE_EPSILON) {
                    var ptA = pt.getPositionWorldOnA();
                    var ptB = pt.getPositionWorldOnB();
                    var noB = pt.get_m_normalWorldOnB();

                    _pPhysics.collisionInfo.objectA = collDataMatch.objA ? getPickedObjectName(collDataMatch.objA) : '';
                    _pPhysics.collisionInfo.objectB = collDataMatch.objB ? getPickedObjectName(collDataMatch.objB) : '';

                    _pPhysics.collisionInfo.distance = pt.getDistance();

                    if (!objsSwapped) {
                        _pPhysics.collisionInfo.positionOnA[0] = ptA.x();
                        _pPhysics.collisionInfo.positionOnA[1] = ptA.y();
                        _pPhysics.collisionInfo.positionOnA[2] = ptA.z();

                        _pPhysics.collisionInfo.positionOnB[0] = ptB.x();
                        _pPhysics.collisionInfo.positionOnB[1] = ptB.y();
                        _pPhysics.collisionInfo.positionOnB[2] = ptB.z();

                        _pPhysics.collisionInfo.normalOnB[0] = noB.x();
                        _pPhysics.collisionInfo.normalOnB[1] = noB.y();
                        _pPhysics.collisionInfo.normalOnB[2] = noB.z();
                    } else {
                        _pPhysics.collisionInfo.positionOnA[0] = ptB.x();
                        _pPhysics.collisionInfo.positionOnA[1] = ptB.y();
                        _pPhysics.collisionInfo.positionOnA[2] = ptB.z();

                        _pPhysics.collisionInfo.positionOnB[0] = ptA.x();
                        _pPhysics.collisionInfo.positionOnB[1] = ptA.y();
                        _pPhysics.collisionInfo.positionOnB[2] = ptA.z();

                        _pPhysics.collisionInfo.normalOnB[0] = -noB.x();
                        _pPhysics.collisionInfo.normalOnB[1] = -noB.y();
                        _pPhysics.collisionInfo.normalOnB[2] = -noB.z();
                    }

                    collDataMatch.collideCb();

                    // mark as collided all collision data from the same exec instance
                    for (var k = 0; k < _pPhysics.collisionData.length; k++) {
                        var cd = _pPhysics.collisionData[k];
                        if (cd.execInstanceID == collDataMatch.execInstanceID) {
                            cd.collideFlag = true;
                        }
                    }
                }
            }
        }

        for (var i = 0; i < _pPhysics.collisionData.length; i++) {
            var cd = _pPhysics.collisionData[i];

            if (!cd.collideFlag) {
                _pPhysics.collisionInfo.objectA = '';
                _pPhysics.collisionInfo.objectB = '';

                _pPhysics.collisionInfo.distance = 0;

                _pPhysics.collisionInfo.positionOnA[0] = 0;
                _pPhysics.collisionInfo.positionOnA[1] = 0;
                _pPhysics.collisionInfo.positionOnA[2] = 0;

                _pPhysics.collisionInfo.positionOnB[0] = 0;
                _pPhysics.collisionInfo.positionOnB[1] = 0;
                _pPhysics.collisionInfo.positionOnB[2] = 0;

                _pPhysics.collisionInfo.normalOnB[0] = 0;
                _pPhysics.collisionInfo.normalOnB[1] = 0;
                _pPhysics.collisionInfo.normalOnB[2] = 0;

                cd.noCollideCb();

                // no need to process other collision data from the same exec instance
                for (var j = i+1; j < _pPhysics.collisionData.length; j++) {
                    var cdj = _pPhysics.collisionData[j];
                    if (cdj.execInstanceID == cd.execInstanceID) {
                        cdj.collideFlag = true;
                    }
                }
            }

            cd.collideFlag = false;
        }
    }

    _pPhysics.world.stepSimulation(dt, 10, 1/60);

    // sync physics and graphics

    for (var i = 0; i < _pPhysics.syncList.length; i++) {
        var syncData = _pPhysics.syncList[i];
        if (!syncData.simulated)
            continue;

        var body = syncData.body;

        if (syncData.type == 'SOFT_BODY') {

            var geometry = syncData.obj.geometry;
            var volumePositions = geometry.attributes.position.array;
            var volumeNormals = geometry.ammoNeedNormals ? geometry.attributes.normal.array : null;

            var association = geometry.ammoIndexAssociation;
            var numVerts = association.length;
            var nodes = body.get_m_nodes();

            for (var j = 0; j < numVerts; j++) {

                var node = nodes.at(j);

                var nodePos = node.get_m_x();
                var x = nodePos.x();
                var y = nodePos.y();
                var z = nodePos.z();

                if (volumeNormals) {
                    var nodeNormal = node.get_m_n();
                    var nx = nodeNormal.x();
                    var ny = nodeNormal.y();
                    var nz = nodeNormal.z();
                }

                var assocVertex = association[j];

                for (var k = 0, kl = assocVertex.length; k < kl; k++) {

                    var indexVertex = assocVertex[k];
                    volumePositions[indexVertex] = x;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nx;

                    indexVertex++;
                    volumePositions[indexVertex] = y;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = ny;

                    indexVertex++;
                    volumePositions[indexVertex] = z;
                    if (volumeNormals)
                        volumeNormals[indexVertex] = nz;

                }

            }

            geometry.attributes.position.needsUpdate = true;
            if (volumeNormals)
                geometry.attributes.normal.needsUpdate = true;

            if (geometry.attributes.previous) {
                v3d.MeshLine.updateAttributes(geometry);
            }

        } else if (!body.isStaticOrKinematicObject()) {
            var ms = body.getMotionState();
            if (ms) {
                ms.getWorldTransform(_pPhysics.transTmp);
                var p = _pPhysics.transTmp.getOrigin();
                var q = _pPhysics.transTmp.getRotation();
                // dynamic objects can't be parented to something
                syncData.obj.position.set(p.x(), p.y(), p.z());
                syncData.obj.quaternion.set(q.x(), q.y(), q.z(), q.w());
            }

        } else if (body.isKinematicObject()) {

            var pos = syncData.obj.getWorldPosition(_pGlob.vec3Tmp);
            var quat = syncData.obj.getWorldQuaternion(_pGlob.quatTmp);

            _pPhysics.transTmp.setIdentity();
            _pPhysics.transTmp.setOrigin(new Ammo.btVector3(pos.x, pos.y, pos.z));
            _pPhysics.transTmp.setRotation(new Ammo.btQuaternion(quat.x, quat.y, quat.z, quat.w));

            body.setWorldTransform(_pPhysics.transTmp);

            // needed to calculate interpolated velocity
            body.getMotionState().setWorldTransform(_pPhysics.transTmp);

        }
    }

}

appInstance.renderCallbacks.push(tick);

// END OF TEMPORARY MEASURE TO PREVENT CRASH [TODO]
}


createPhysicsBody('STATIC', 'Ground', 'MESH', 0);
createPhysicsBody('DYNAMIC', 'Pin', 'MESH', 1);
createPhysicsBody('DYNAMIC', 'Pin2', 'MESH', 1);
createPhysicsBody('DYNAMIC', 'Pin3', 'MESH', 1);
createPhysicsBody('DYNAMIC', 'Whirligig', 'MESH', 1);
createPhysicsBody('DYNAMIC', 'Suzanne', 'MESH', 1);
createPhysicsBody('STATIC', 'Axis', 'BOX', 0);
createPhysicsBody('STATIC', 'Empty', 'EMPTY', 0);
createPhysicsBody('DYNAMIC', 'Icosphere', 'SPHERE', 1);

createSoftBody('Cube', 'VOLUME', 3, 500);

physicsBodyApplyParam('LINEAR_FACTOR', 'Whirligig', createVector(0, 0, 0));
physicsBodyApplyParam('ANGULAR_FACTOR', 'Whirligig', createVector(0, 0, 1));

addPhysicsConstraint('Suzanne', 'Axis', 'HINGE', getObjTransform('Axis', 'position', 'xyz'), createVector(1, 0, 0), [0, 0, 0], [0, 0, 0]);
addPhysicsConstraint('Icosphere', 'Empty', 'SPRING', getObjTransform('Axis', 'position', 'xyz'), [0, 0, 0], 50, 0.5);

eventHTMLElem('mousedown', ['CONTAINER'], false, function(event) {
  shoot();
});
eventHTMLElem('touchstart', ['CONTAINER'], false, function(event) {
  shoot();
});

createSoftBody('Rope', 'ROPE', 1, 0);
createPhysicsBody('DYNAMIC', 'Pendulum', 'SPHERE', 1);
createPhysicsBody('STATIC', 'Pivot', 'SPHERE', 0);

physicsBodyApplyParam('STIFFNESS', 'Rope', 1.3);

softBodyAnchor('Rope', 'Pivot', getObjTransform('Pivot', 'position', 'xyz'));
softBodyAnchor('Rope', 'Pendulum', getObjTransform('Pendulum', 'position', 'xyz'));

createPhysicsBody('STATIC', 'FlagPole', 'CYLINDER', 0);
createSoftBody('Banner', 'PATCH', 1, 0);

softBodyAnchor('Banner', 'FlagPole', getObjTransform('FlagAnchorTop', 'position', 'xyz'));
softBodyAnchor('Banner', 'FlagPole', getObjTransform('FlagAnchorBottom', 'position', 'xyz'));

var VARS = Object.defineProperties({}, {
    "camDir": { get: function() { return camDir; }, set: function(val) { camDir = val; } },
    "clonedBall": { get: function() { return clonedBall; }, set: function(val) { clonedBall = val; } },
});

Function('app', 'v3d', 'VARS', 'PROC', (('var body = v3d.puzzles.physics.bodies[\'Banner\'];' + '\n' +
'' + '\n' +
'body.get_m_cfg().set_kLF(0.1);' + '\n' +
'body.get_m_cfg().set_kDG(0.001);' + '\n' +
'body.get_m_cfg().set_kDP(0.001);' + '\n' +
'' + '\n' +
'body.setWindVelocity(new Ammo.btVector3(7, 0, 0));' + '\n' +
'')))(appInstance, v3d, VARS, PROC);



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
