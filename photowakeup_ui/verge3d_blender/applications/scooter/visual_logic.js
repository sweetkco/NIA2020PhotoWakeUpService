/**
 * Generated by Verge3D Puzzles v.3.4.0
 * Fri Nov 13 2020 20:16:15 GMT+0300 (Moscow Standard Time)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.objClickInfo = [];
_pGlob.pickedObject = '';
_pGlob.objHoverInfo = [];
_pGlob.hoveredObject = '';
_pGlob.objMovementInfos = {};
_pGlob.objDragOverCallbacks = [];
_pGlob.objDragOverInfoByBlock = {}
_pGlob.dragMoveOrigins = {};
_pGlob.dragScaleOrigins = {};
_pGlob.mediaElements = {};
_pGlob.loadedFiles = {};
_pGlob.loadedFile = '';
_pGlob.promiseValue = '';
_pGlob.animMixerCallbacks = [];
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.animateParamUpdate = null;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.gamepadIndex = 0;

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();
_pGlob.intervals = {};

var _pPhysics = {};

_pPhysics.tickCallbacks = [];
_pPhysics.syncList = [];
_pPhysics.consList = [];

// internal info
_pPhysics.collisionData = [];

// goes to collision callback
_pPhysics.collisionInfo = {
    objectA: '',
    objectB: '',
    distance: 0,
    positionOnA: [0, 0, 0],
    positionOnB: [0, 0, 0],
    normalOnB: [0, 0, 0]
};

var _noWebAudioReported = false;

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};

_pGlob.wooProductInfo = {};

PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

var wheels_rotation, loaded;


// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// setInterval puzzle
function registerInterval(timeout, callback) {
    window.setInterval(callback, 1000 * timeout);
}



// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



wheels_rotation = 0;
loaded = false;

registerInterval(0.01, function() {
  if (loaded == false) {
    setHTMLElemStyle('transform', ['rotate(',wheels_rotation,'deg)'].join(''), 'preloader_scooter_wheel_1', true);
    setHTMLElemStyle('transform', ['rotate(',wheels_rotation,'deg)'].join(''), 'preloader_scooter_wheel_2', true);
    wheels_rotation = wheels_rotation + 5;
  }
});


// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemStyle('marginLeft', String(Math.round(_initGlob.percentage) - 100) + '%', 'preloader_scooter_body', true);
  if (Math.round(_initGlob.percentage) < 30) {
    setHTMLElemAttribute('innerHTML', 'Loading models...', 'loading_text', true);
  } else if (Math.round(_initGlob.percentage) < 90) {
    setHTMLElemAttribute('innerHTML', 'Preparing scene...', 'loading_text', true);
  } else if (Math.round(_initGlob.percentage) >= 90) {
    setHTMLElemAttribute('innerHTML', 'Loading textures...', 'loading_text', true);
    registerSetTimeout(2, function() {
      setHTMLElemAttribute('innerHTML', 'Compiling shaders...', 'loading_text', true);
      registerSetTimeout(2, function() {
        setHTMLElemAttribute('innerHTML', 'Please wait...', 'loading_text', true);
      });
    });
  }
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', true);
  loaded = true;
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {
initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["unfreeze"] = unfreeze;
this.procedures["freeze"] = freeze;
this.procedures["freez-unfreez"] = freez_unfreez;
this.procedures["bloom_optimization"] = bloom_optimization;
this.procedures["reset_boarder"] = reset_boarder;
this.procedures["changing_carpaint"] = changing_carpaint;

var PROC = {
    "unfreeze": unfreeze,
    "freeze": freeze,
    "freez-unfreez": freez_unfreez,
    "bloom_optimization": bloom_optimization,
    "reset_boarder": reset_boarder,
    "changing_carpaint": changing_carpaint,
};

var camera_moving, init_app, right_panels_list, right_panel_hidden, serie_name, amount_of_buttons, current_button, Color_1, Color_2, metallic, pointness, roughness, carpaint_animating, rims_list, front_glass_list, front_carrier_installed, mirrors_list, mats_list, mouse_down, current_right_panel, left_panel_hidden, i, current_carpaint_params, texture_loading, backpack_1_installed, dashboar_animating, markers_visible, new_carpaint_params, environment, backpack_2_installed, carriers_list, bloom_enabled, bloom_threshhold, bloom_strength, bloom_radius, leather_parts_list, carbon_1, carbon_2, back_lights_on, side_footboard_moved, back_footboard_moved, front_lights_on, side_lights_on, dashboard_switcher_current, dashboard_switcher_new;


// enableRendering puzzle
function enableRendering() {
    appInstance.enableRendering();
}


// Describe this function...
function unfreeze() {
  enableRendering();
  init_app = false;
}


// disableRendering puzzle
function disableRendering(enableSSAA) {
    appInstance.ssaaOnPause = enableSSAA;
    appInstance.disableRendering(1);
}


// Describe this function...
function freeze() {
  disableRendering(true);
}



// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return (obj.type !== "AmbientLight" && obj.name !== ""
            && !(obj.isMesh && obj.isMaterialGeneratedMesh));
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    appInstance.scene.traverse(function(obj) {
        if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
            objFound = obj;
            if (runTime) {
                _pGlob.objCache[objName] = objFound;
            }
        }
    });
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc;
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}




// getAnimations puzzle
function getAnimations(objNames) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}



// isAnimationPlaying puzzle
function isAnimationPlaying(animations) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];
    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (!animName)
            continue;
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (action && action.isRunning())
            return true;
    }
    return false;
}


// Describe this function...
function freez_unfreez() {
  if (init_app || carpaint_animating || camera_moving || isAnimationPlaying(getAnimations(['ALL_OBJECTS'])) || mouse_down || texture_loading || dashboar_animating) {
    unfreeze();
  } else {
    freeze();
  }
}


function AudioWebAudio() {
    this.audio = new v3d.Audio(new v3d.AudioListener());

    this._muted = false;
    this._volume = 1;
}

Object.assign(AudioWebAudio.prototype, {

    load: function(url) {
        var scope = this;

        var xhr = new XMLHttpRequest()
        xhr.open('GET', url);
        xhr.responseType = 'arraybuffer';

        xhr.onload = function(e) {
            if (this.status === 200) {
                // new promise-based syntax is not currently supported in Safari
                scope.audio.context.decodeAudioData(this.response, function(decodedData) {
                    scope.audio.setBuffer(decodedData);
                });
            }
        }

        xhr.send();
        return this;
    },

    play: function() {
        if (this.audio.buffer === null) return;
        this.audio.play();
    },

    pause: function() {
        this.audio.pause();
    },

    stop: function() {
        if (this.audio.buffer === null) return;
        this.audio.stop();
    },

    rewind: function() {
        if (this.audio.buffer === null) return;

        var isPlaying = this.audio.isPlaying;
        this.audio.stop();
        if (isPlaying) {
            this.audio.play();
        }
    },

    isPlaying: function() {
        return this.audio.isPlaying;
    },

    setLoop: function(looped) {
        this.audio.setLoop(looped);
    },

    setVolume: function(volume) {
        this._volume = volume;
        if (!this._muted) {
            this.audio.setVolume(volume);
        }
    },

    setMuted: function(muted) {
        this._muted = muted;
        this.audio.setVolume(muted ? 0 : this._volume);
    },

});



// loadMedia puzzle
function loadMedia_WebAudio(url) {
    if (!v3d.Detector.checkWebAudio()) {
        if (!_noWebAudioReported) {
            _noWebAudioReported = true;
            console.warn('v3d.puzzles: Web Audio API not supported');
        }
        return null;
    }

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new AudioWebAudio().load(url);
    }
    return elems[url];
}



// volume puzzle
function volume(mediaElem, volume) {
    if (!mediaElem)
        return;

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElem.setVolume(v3d.Math.clamp(volume, 0.0, 1.0));
}



// whenMoved puzzle
function whenMoved(objNames, velocity, cbStart, cbMove, cbStop) {

    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;

    function savePreviousCoords(objName, obj, prevIsMoving) {
        // GC optimization
        if (_pGlob.objMovementInfos[objName]) {
            var info = _pGlob.objMovementInfos[objName];

            info.prevPosX = obj.position.x;
            info.prevPosY = obj.position.y;
            info.prevPosZ = obj.position.z;
            info.prevRotX = obj.rotation.x;
            info.prevRotY = obj.rotation.y;
            info.prevRotZ = obj.rotation.z;
            info.prevScaX = obj.scale.x;
            info.prevScaY = obj.scale.y;
            info.prevScaZ = obj.scale.z;
            info.prevIsMoving = prevIsMoving;
        } else {
            var info = {
                prevPosX: obj.position.x,
                prevPosY: obj.position.y,
                prevPosZ: obj.position.z,
                prevRotX: obj.rotation.x,
                prevRotY: obj.rotation.y,
                prevRotZ: obj.rotation.z,
                prevScaX: obj.scale.x,
                prevScaY: obj.scale.y,
                prevScaZ: obj.scale.z,
                prevIsMoving: prevIsMoving
            };
            _pGlob.objMovementInfos[objName] = info;
        }

        return info;
    }

    function checkMoving(objName, obj, elapsed) {

        var info = _pGlob.objMovementInfos[objName] ||
            savePreviousCoords(objName, obj, false);

        var delta = velocity * elapsed;

        var isMoving =
            Math.abs(obj.position.x - info.prevPosX) > delta ||
            Math.abs(obj.position.y - info.prevPosY) > delta ||
            Math.abs(obj.position.z - info.prevPosZ) > delta ||
            Math.abs(obj.rotation.x - info.prevRotX) > delta ||
            Math.abs(obj.rotation.y - info.prevRotY) > delta ||
            Math.abs(obj.rotation.z - info.prevRotZ) > delta ||
            Math.abs(obj.scale.x - info.prevScaX) > delta ||
            Math.abs(obj.scale.y - info.prevScaY) > delta ||
            Math.abs(obj.scale.z - info.prevScaZ) > delta;

        if (!info.prevIsMoving && isMoving) {
            cbStart();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && isMoving) {
            cbMove();
            savePreviousCoords(objName, obj, true);
        } else if (info.prevIsMoving && !isMoving) {
            cbStop();
            savePreviousCoords(objName, obj, false);
        } else {
            savePreviousCoords(objName, obj, false);
        }
    }

    function addToRender(objName) {

        var obj = getObjectByName(objName);
        if (!obj)
            return;

        appInstance.renderCallbacks.push(function(elapsed, timeline) { checkMoving(objName, obj, elapsed); });
    }

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName)
            continue;

        addToRender(objName);
    }
}



// everyFrame puzzle
function registerEveryFrame(callback) {
    if (typeof callback == "function")
        appInstance.renderCallbacks.push(callback);
}



/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}



/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && "v3d" in scene.userData && "animFrameRate" in scene.userData.v3d) {
        return scene.userData.v3d.animFrameRate;
    }
    return 24;
}



var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();



// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, isPlayAnimCompat, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                // compatibility reasons: deprecated playAnimation puzzles don't
                // change repetitions
                if (!isPlayAnimCompat) {
                    action.repetitions = Infinity;
                }

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}



function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}



// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}



// Copyright (c) 2010-2019 Tween.js authors.
// Easing equations Copyright (c) 2001 Robert Penner http://robertpenner.com/easing/
// Code copied from https://cdnjs.cloudflare.com/ajax/libs/tween.js/17.3.0/Tween.min.js

var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(t.TWEEN=TWEEN)}(this);



// animateParam puzzle
appInstance.renderCallbacks.push(function() { TWEEN.update(); });



// animateParam puzzle
function animateParam(from, to, duration, easing, easing2, repeat, yoyo, on_update, when_finished) {

    var mode = easing == "Linear" ?
        TWEEN.Easing.Linear.None : TWEEN.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    var tween = new TWEEN.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();
}



// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}



// pauseSound puzzle
function pauseSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.pause();
}



// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {
        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.camera);
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}



// whenClicked puzzle
function registerOnClick(objNames, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {
    objNames = retrieveObjectNames(objNames) || [];

    var objNamesFiltered = objNames.filter(function(name) {
        return name;
    });

    // for AR/VR
    _pGlob.objClickInfo.push({
        objNames: objNamesFiltered,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj(objNamesFiltered, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo();
            }

        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo();
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}



// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}



// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback, false);
    }
}



// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'LINUX':
        return /Linux/.test(platform);
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return !!(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch);
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    default:
        return false;
    }

}



// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}



// removePostprocessing puzzle
function removePostprocessing() {
    // keep outline
    appInstance.disablePostprocessing(true);
}


// Describe this function...
function bloom_optimization() {
  if (back_lights_on == true || front_lights_on == true || side_lights_on == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
    bloom_enabled = true;
  } else if (back_lights_on == false && front_lights_on == false && side_lights_on == false) {
    removePostprocessing();
    bloom_enabled = false;
  }
}


// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = getElement(id, isParent);
    return elem ? elem[attr]: '';
}




/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && "v3d" in scene.userData && "coordSystem" in scene.userData.v3d) {
        return scene.userData.v3d.coordSystem;
    } else {
        // COMPAT: <2.17, consider replacing to 'Y_UP_RIGHT' for scenes with unknown origin
        return 'Z_UP_RIGHT';
    }
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();




// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = appInstance.camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (appInstance.camera.parent) {
            appInstance.camera.parent.worldToLocal(worldPos);
        }
        appInstance.camera.position.copy(worldPos);
        appInstance.camera.lookAt(worldTarget);
        doSlot();
    }
}



// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}



// openWebPage puzzle
function openWebPage(url, mode) {

    if (appInstance && appInstance.controls) {
        appInstance.controls.dispose();
        appInstance.enableControls();
    }

    if (mode == "NEW") {
        window.open(url);
    } else if (mode == "NO_RELOAD") {
        history.pushState('verge3d state', 'verge3d page', url);
    } else {
        var target;
        switch (mode) {
            case "SAME":
                target = "_self";
                break;
            case "TOP":
                target = "_top";
                break;
            case "PARENT":
                target = "_parent";
                break;
        }
        if (typeof window.PE != "undefined") {
            if (window.confirm("Are you sure you want to leave Puzzles?"))
                window.open(url, target);
        } else {
            window.open(url, target);
        }
    }
}



// initFullscreen puzzle
function initFullscreen(id, isParent, cb_enter, cb_exit, cb_unavail) {
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var doc = isParent ? parent.document: document;
    if (!(doc.fullscreenEnabled ||
        doc.webkitFullscreenEnabled ||
        doc.mozFullScreenEnabled ||
        doc.msFullscreenEnabled)) {
            cb_unavail();
            return;
    }
    elem.addEventListener("click", function(event) {
        event.stopPropagation();
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement) {
            exitFullscreen();
        } else {
            requestFullscreen(doc.body);
        }
    });
    function changeFullscreen() {
        if (doc.fullscreenElement ||
            doc.webkitFullscreenElement ||
            doc.mozFullScreenElement ||
            doc.msFullscreenElement)
            cb_enter();
        else
            cb_exit();
    }
    doc.addEventListener("webkitfullscreenchange", changeFullscreen);
    doc.addEventListener("mozfullscreenchange", changeFullscreen);
    doc.addEventListener("msfullscreenchange", changeFullscreen);
    doc.addEventListener("fullscreenchange", changeFullscreen);
    function requestFullscreen(fselem) {
        if (fselem.requestFullscreen)
            fselem.requestFullscreen();
        else if (fselem.mozRequestFullScreen)
            fselem.mozRequestFullScreen();
        else if (fselem.webkitRequestFullscreen)
            fselem.webkitRequestFullscreen();
        else if (fselem.msRequestFullscreen)
            fselem.msRequestFullscreen();
    }
    function exitFullscreen() {
        if (doc.exitFullscreen)
            doc.exitFullscreen();
        else if (doc.mozCancelFullScreen)
            doc.mozCancelFullScreen();
        else if (doc.webkitExitFullscreen)
            doc.webkitExitFullscreen();
        else if (doc.msExitFullscreen)
            doc.msExitFullscreen();
    }
}


// Describe this function...
function reset_boarder(serie_name, amount_of_buttons, current_button) {
  var i_inc = 1;
  if (1 > amount_of_buttons) {
    i_inc = -i_inc;
  }
  for (i = 1; i_inc >= 0 ? i <= amount_of_buttons : i >= amount_of_buttons; i += i_inc) {
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', [serie_name,'_',i].join(''), true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', [serie_name,'_',i].join(''), true);
    }
  }
  setHTMLElemStyle('borderColor', '#f22', [serie_name,'_',current_button].join(''), true);
}


// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if (attr === 'style') {
            // NOTE: setting an attribute 'style' instead of a property 'style'
            // fixes IE11 worng behavior
            elem.setAttribute(attr, value);
        } else {
            elem[attr] = value;
        }
    }
}



// show and hide puzzles
function changeVis(objNames, bool) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
    }
}



function matGetColors(matName) {
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeRGBMap);
    else if (mat.isMeshStandardMaterial)
        return ['color', 'emissive'];
    else
        return [];
}



// setMaterialColor puzzle
function setMaterialColor(matName, colName, r, g, b, cssCode) {

    var colors = matGetColors(matName);

    if (colors.indexOf(colName) < 0)
        return;

    if (cssCode) {
        var color = new v3d.Color(cssCode);
        color.convertSRGBToLinear();
        r = color.r;
        g = color.g;
        b = color.b;
    }

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var rgbIdx = mat.nodeRGBMap[colName];
            mat.nodeRGB[rgbIdx].x = r;
            mat.nodeRGB[rgbIdx].y = g;
            mat.nodeRGB[rgbIdx].z = b;
        } else {
            mat[colName].r = r;
            mat[colName].g = g;
            mat[colName].b = b;
        }
        mat.needsUpdate = true;

        if (mat === appInstance.worldMaterial)
            appInstance.updateEnvironment(mat);
    }
}


// Describe this function...
function changing_carpaint(Color_1, Color_2, metallic, pointness, roughness) {
  new_carpaint_params[0] = Color_1[0];
  new_carpaint_params[1] = Color_1[1];
  new_carpaint_params[2] = Color_1[2];
  new_carpaint_params[3] = Color_2[0];
  new_carpaint_params[4] = Color_2[1];
  new_carpaint_params[5] = Color_2[2];
  new_carpaint_params[6] = metallic;
  new_carpaint_params[7] = pointness;
  new_carpaint_params[8] = roughness;

  animateParam(current_carpaint_params, new_carpaint_params, 0.5, 'Linear', 'InOut', 0, false,
      function() {
    carpaint_animating = true;
    setMaterialColor('carpaint', 'Color_1', _pGlob.animateParamUpdate[0], _pGlob.animateParamUpdate[1], _pGlob.animateParamUpdate[2], '');
    setMaterialColor('carpaint', 'Color_2', _pGlob.animateParamUpdate[3], _pGlob.animateParamUpdate[4], _pGlob.animateParamUpdate[5], '');
    setMaterialValue('carpaint', 'metallic', _pGlob.animateParamUpdate[6]);
    setMaterialValue('carpaint', 'pointness', _pGlob.animateParamUpdate[7]);
    setMaterialValue('carpaint', 'roughness', _pGlob.animateParamUpdate[8]);
  },
      function() {
    carpaint_animating = false;
  });

      }


// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    var styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (var i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        try { var cssRules = styles[i].cssRules; }
        catch (e) { continue; }

        for (var j = 0; j < cssRules.length; j++) {
            var cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                var cssRulesMedia = cssRule.cssRules;
                for (var k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}



/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}



/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

}



// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    var textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        var isHDR = (url.search(/\.hdr$/) > 0);

        if (!isHDR) {
            var loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            var loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(image) {
            // JPEGs can't have an alpha channel, so memory can be saved by storing them as RGB.
            var isJPEG = url.search(/\.(jpg|jpeg)$/) > 0 || url.search(/^data\:image\/jpeg/) === 0;

            textures.forEach(function(elem) {

                if (!isHDR) {
                    elem.image = image;
                } else {
                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(image);

                    // NOTE: reset params since the texture may be converted to float
                    elem.type = v3d.UnsignedByteType;
                    elem.encoding = v3d.RGBEEncoding;

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;

                }

                elem.format = isJPEG ? v3d.RGBFormat : v3d.RGBAFormat;
                elem.needsUpdate = true;

                // update world material if it is using this texture
                var wMat = appInstance.worldMaterial;
                if (wMat)
                    for (var texName in wMat.nodeTextures)
                        if (wMat.nodeTextures[texName] == elem)
                            appInstance.updateEnvironment(wMat);

            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        var videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        var videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        var canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        var canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}



/**
 * Obtain a unique name from the given one. Names are tested with the given
 * callback function that should return a boolean "unique" flag. If the given
 * "name" is not considered unique, then "name2" is tested for uniqueness, then
 * "name3" and so on...
 */
function acquireUniqueName(name, isUniqueCb) {
    var uniqueName = name;

    if (isUniqueCb !== undefined) {
        while (!isUniqueCb(uniqueName)) {
            var r = uniqueName.match(/^(.*?)(\d+)$/);
            if (!r) {
                uniqueName += "2";
            } else {
                uniqueName = r[1] + (parseInt(r[2], 10) + 1);
            }
        }
    }

    return uniqueName;
}



/**
 * Check if the given material name is already used by materials on the scene.
 */
function matNameUsed(name) {
    return v3d.SceneUtils.getMaterialByName(appInstance, name) !== null;
}



// assignMaterial puzzle
function assignMat(objNames, matName) {
    objNames = retrieveObjectNames(objNames);
    if (!objNames || !matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];

            var hasSkinning = firstSubmesh.isSkinnedMesh;
            var influences = firstSubmesh.morphTargetInfluences;
            var hasMorphing = influences !== undefined && influences.length > 0;

            if (hasSkinning || hasMorphing) {
                var newMat = mat.clone();
                newMat.name = acquireUniqueName(mat.name, function(name) {
                    return !matNameUsed(name);
                });

                if (hasSkinning) {
                    newMat.skinning = true;
                }

                if (hasMorphing) {
                    newMat.morphTargets = true;
                    if (firstSubmesh.geometry.morphAttributes.normal !== undefined) {
                        newMat.morphNormals = true;
                    }
                }

                firstSubmesh.material = newMat;
            } else {
                firstSubmesh.material = mat;
            }
        }
    }
}



camera_moving = false;
mouse_down = false;
texture_loading = false;
bloom_enabled = false;
bloom_threshhold = 2;
bloom_strength = 0.3;
bloom_radius = 0.5;
side_lights_on = false;
back_lights_on = false;
front_lights_on = false;
side_footboard_moved = false;
back_footboard_moved = false;
dashboard_switcher_current = 0;
dashboard_switcher_new = 0;

init_app = true;

volume(loadMedia_WebAudio('./sounds/light_on.mp3'), 1);
volume(loadMedia_WebAudio('./sounds/light_off.mp3'), 1);
volume(loadMedia_WebAudio('./sounds/engine_loop.mp3'), 0.1);
volume(loadMedia_WebAudio('./sounds/horn.mp3'), 0.3);
volume(loadMedia_WebAudio('./sounds/seat_opening.mp3'), 0.6);
volume(loadMedia_WebAudio('./sounds/seat_closing.mp3'), 0.6);
volume(loadMedia_WebAudio('./sounds/footboard_release.mp3'), 0.4);
volume(loadMedia_WebAudio('./sounds/footboard_setback.mp3'), 0.4);

whenMoved('Camera', 0.001, function() {
  camera_moving = true;
}, function() {}, function() {
  camera_moving = false;
});

registerEveryFrame(function() {
  freez_unfreez();
});

registerOnClick('trigger_engine_swithcer', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_engine_swithcer', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      dashboar_animating = true;
  if (dashboard_switcher_current == 0) {

    animateParam(0, 1, 1, 'Linear', 'InOut', 0, false,
        function() {
      setMaterialValue('dashboard', 'dashboard_switcher', _pGlob.animateParamUpdate);
    },
        function() {
      dashboar_animating = false;
    });

        dashboard_switcher_current = 1;
    playSound(loadMedia_WebAudio('./sounds/engine_loop.mp3'), true);
  } else if (dashboard_switcher_current == 1) {

    animateParam(1, 0, 0.5, 'Linear', 'InOut', 0, false,
        function() {
      setMaterialValue('dashboard', 'dashboard_switcher', _pGlob.animateParamUpdate);
    },
        function() {
      dashboar_animating = false;
    });

        dashboard_switcher_current = 0;
    pauseSound(loadMedia_WebAudio('./sounds/engine_loop.mp3'));
  }
}, function() {});

eventHTMLElem('mousedown', ['DOCUMENT'], true, function(event) {
  mouse_down = true;
});

registerOnClick('trigger_seat_unlock', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_seat_unlock', null, null, 'LoopOnce', 1,
          function() {}, undefined, false);

      playSound(loadMedia_WebAudio('./sounds/seat_opening.mp3'), false);

  operateAnimation('PLAY', 'seat', null, null, 'LoopOnce', 1,
          function() {

    operateAnimation('PLAY', 'trigger_seat_lock', null, null, 'LoopOnce', 1,
            function() {}, undefined, false);

        }, undefined, false);

      }, function() {});

if (featureAvailable('HDR') == false) {
  setMaterialValue('Verge3D_Environment_World', 'Intencity', 5);
}

eventHTMLElem('mouseup', ['DOCUMENT'], true, function(event) {
  mouse_down = false;
});

registerOnClick('trigger_seat_lock', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_seat_lock', null, null, 'LoopOnce', 1,
          function() {}, undefined, true);

      playSound(loadMedia_WebAudio('./sounds/seat_closing.mp3'), false);

  operateAnimation('PLAY', 'seat', null, null, 'LoopOnce', 1,
          function() {

    operateAnimation('PLAY', 'trigger_seat_unlock', null, null, 'LoopOnce', 1,
            function() {}, undefined, true);

        }, undefined, true);

      }, function() {});

registerOnClick('trigger_side_footboard', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_side_footboard', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      if (side_footboard_moved == false) {
    playSound(loadMedia_WebAudio('./sounds/footboard_release.mp3'), false);

    operateAnimation('PLAY', 'side_footboard', null, null, 'AUTO', 1,
            function() {
      side_footboard_moved = true;
    }, undefined, false);

        } else if (side_footboard_moved == true) {
    playSound(loadMedia_WebAudio('./sounds/footboard_setback.mp3'), false);

    operateAnimation('PLAY', 'side_footboard', null, null, 'AUTO', 1,
            function() {
      side_footboard_moved = false;
    }, undefined, true);

        }
}, function() {});

registerOnClick('trigger_back_footboard', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_back_footboard', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      if (back_footboard_moved == false) {
    playSound(loadMedia_WebAudio('./sounds/footboard_release.mp3'), false);

    operateAnimation('PLAY', 'back_footboard', null, null, 'AUTO', 1,
            function() {
      back_footboard_moved = true;
    }, undefined, false);

        } else if (back_footboard_moved == true) {
    playSound(loadMedia_WebAudio('./sounds/footboard_setback.mp3'), false);

    operateAnimation('PLAY', 'back_footboard', null, null, 'AUTO', 1,
            function() {
      back_footboard_moved = false;
    }, undefined, true);

        }
}, function() {});

if (getHTMLElemAttribute('offsetHeight', 'container', false) / getHTMLElemAttribute('offsetWidth', 'container', false) < 1) {
  tweenCamera('camera_horizontal', 'Empty', 0, function() {}, 0);
} else if (getHTMLElemAttribute('offsetHeight', 'container', false) / getHTMLElemAttribute('offsetWidth', 'container', false) >= 1) {
  tweenCamera('camera_vertical', 'Empty', 0, function() {}, 0);
}

registerOnClick('trigger_horn', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_horn', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      playSound(loadMedia_WebAudio('./sounds/horn.mp3'), false);
}, function() {});

registerOnClick('trigger_front_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_front_lights', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      if (front_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('front_lamps', 'light_switcher', 1);
    setMaterialValue('front_reflectors', 'light_switcher', 20);
    front_lights_on = true;
    bloom_optimization();
  } else if (front_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('front_lamps', 'light_switcher', 0);
    setMaterialValue('front_reflectors', 'light_switcher', 0);
    front_lights_on = false;
    bloom_optimization();
  }
}, function() {});

registerOnClick('trigger_back_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_back_lights', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      if (back_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('back_lamps', 'light_switcher', 1);
    setMaterialValue('red_lamp', 'light_switcher', 1);
    setMaterialValue('red_reflector', 'light_switcher', 20);
    setMaterialValue('back_reflectors', 'light_switcher', 20);
    back_lights_on = true;
    bloom_optimization();
  } else if (back_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('back_lamps', 'light_switcher', 0);
    setMaterialValue('red_lamp', 'light_switcher', 0);
    setMaterialValue('red_reflector', 'light_switcher', 0);
    setMaterialValue('back_reflectors', 'light_switcher', 0);
    back_lights_on = false;
    bloom_optimization();
  }
}, function() {});

registerOnClick('trigger_side_lights', false, false, [0,1,2], function() {

  operateAnimation('PLAY', 'trigger_side_lights', null, null, 'AUTO', 1,
          function() {}, undefined, false);

      if (side_lights_on == false) {
    playSound(loadMedia_WebAudio('./sounds/light_on.mp3'), false);
    setMaterialValue('side_lamps', 'light_switcher', 1);
    setMaterialValue('side_reflectors', 'light_switcher', 20);
    side_lights_on = true;
    bloom_optimization();
  } else if (side_lights_on == true) {
    playSound(loadMedia_WebAudio('./sounds/light_off.mp3'), false);
    setMaterialValue('side_lamps', 'light_switcher', 0);
    setMaterialValue('side_reflectors', 'light_switcher', 0);
    side_lights_on = false;
    bloom_optimization();
  }
}, function() {});

right_panels_list = ['coach_colors_list', 'environment_list', 'leather_list', 'rim_list', 'tyre_list', 'glass_list', 'carrier_list', 'mirror_list', 'mat_list', 'nameplate_list'];
current_right_panel = 'coach_colors_list';
markers_visible = true;

setHTMLElemStyle('borderColor', '#f22', ['coach_color_button_11', 'environment_button_1', 'leather_button_1', 'rim_1', 'tyre_1', 'glass_1', 'carrier_1', 'mirror_1', 'mat_1', 'nameplate_1', 'tyre_color_1'], true);

right_panel_hidden = false;
left_panel_hidden = false;

eventHTMLElem('click', 'enquire_button', true, function(event) {
  openWebPage('https://www.soft8soft.com/verge3d/', 'NEW');
});

eventHTMLElem('click', 'hide_right_panel_button', true, function(event) {
  if (right_panel_hidden == false) {
    setHTMLElemStyle('marginRight', '-80px', 'right_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/hide_panel.svg\')', 'hide_right_panel_button', true);
    right_panel_hidden = true;
  } else if (right_panel_hidden == true) {
    setHTMLElemStyle('marginRight', '0px', 'right_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/unhide_panel.svg\')', 'hide_right_panel_button', true);
    right_panel_hidden = false;
  }
});

initFullscreen('custom_fullscreen_button', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_2.png\')', 'custom_fullscreen_button', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_1.png\')', 'custom_fullscreen_button', true);
}, function() {});

initFullscreen('custom_fullscreen_button_mob', true, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_2.png\')', 'custom_fullscreen_button_mob', true);
}, function() {
  setHTMLElemStyle('backgroundImage', 'url(\'./images/fullscreen_1.png\')', 'custom_fullscreen_button_mob', true);
}, function() {});

eventHTMLElem('click', 'hide_left_panel_button', true, function(event) {
  if (left_panel_hidden == false) {
    setHTMLElemStyle('marginLeft', '-80px', 'left_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/unhide_panel.svg\')', 'hide_left_panel_button', true);
    left_panel_hidden = true;
  } else if (left_panel_hidden == true) {
    setHTMLElemStyle('marginLeft', '0px', 'left_panel', true);
    setHTMLElemStyle('backgroundImage', 'url(\'./images/hide_panel.svg\')', 'hide_left_panel_button', true);
    left_panel_hidden = false;
  }
});

eventHTMLElem('click', 'scroll_right_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', current_right_panel, true) + 120, current_right_panel, true);
});

eventHTMLElem('click', ['hide_markers_button', 'hide_markers_button_mob'], true, function(event) {
  if (markers_visible == true) {
    changeVis(['GROUP', 'Triggers'], false);
    markers_visible = false;
    setHTMLElemStyle('backgroundImage', 'url(\'./images/icon_show_markers.png\')', 'hide_markers_button', true);
  } else if (markers_visible == false) {
    changeVis(['GROUP', 'Triggers'], true);
    markers_visible = true;
    setHTMLElemStyle('backgroundImage', 'url(\'./images/icon_hide_markers.png\')', 'hide_markers_button', true);
  }
});

eventHTMLElem('click', 'scroll_left_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', current_right_panel, true) - 120, current_right_panel, true);
});

eventHTMLElem('click', 'scroll_down_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', current_right_panel, true) + 120, current_right_panel, true);
  console.log('I\'m here!!!');
});

eventHTMLElem('click', ['button_coach', 'button_coach_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'coach_colors_list', true);
  current_right_panel = 'coach_colors_list';
});

eventHTMLElem('click', ['button_frontglass', 'button_frontglass_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'glass_list', true);
  current_right_panel = 'glass_list';
});

eventHTMLElem('click', 'scroll_up_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', current_right_panel, true) - 120, current_right_panel, true);
});

eventHTMLElem('click', ['button_environment', 'button_environment_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'environment_list', true);
  current_right_panel = 'environment_list';
});

eventHTMLElem('click', 'main_scroll_down_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', 'main_buttons_list', true) + 120, 'main_buttons_list', true);
});

eventHTMLElem('click', ['button_carriers', 'button_carriers_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'carrier_list', true);
  current_right_panel = 'carrier_list';
});

eventHTMLElem('click', ['button_leather', 'button_leather_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'leather_list', true);
  current_right_panel = 'leather_list';
});

eventHTMLElem('click', 'main_scroll_up_button', true, function(event) {
  setHTMLElemAttribute('scrollTop', getHTMLElemAttribute('scrollTop', 'main_buttons_list', true) - 120, 'main_buttons_list', true);
});

eventHTMLElem('click', ['button_mirrors', 'button_mirrors_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'mirror_list', true);
  current_right_panel = 'mirror_list';
});

eventHTMLElem('click', 'mobile_scroll_left_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', 'mobile_buttons_list', true) - 200, 'mobile_buttons_list', true);
});

eventHTMLElem('click', ['button_rims', 'button_rims_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'rim_list', true);
  current_right_panel = 'rim_list';
});

eventHTMLElem('click', ['button_mats', 'button_mats_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'mat_list', true);
  current_right_panel = 'mat_list';
});

eventHTMLElem('click', 'mobile_scroll_right_button', true, function(event) {
  setHTMLElemAttribute('scrollLeft', getHTMLElemAttribute('scrollLeft', 'mobile_buttons_list', true) + 200, 'mobile_buttons_list', true);
});

eventHTMLElem('click', ['button_tyre', 'button_tyre_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'tyre_list', true);
  current_right_panel = 'tyre_list';
});

eventHTMLElem('click', ['button_nameplate', 'button_nameplate_mob'], true, function(event) {
  setHTMLElemStyle('display', 'none', right_panels_list, true);
  setHTMLElemStyle('display', 'flex', 'nameplate_list', true);
  current_right_panel = 'nameplate_list';
});

carpaint_animating = false;
current_carpaint_params = [0, 0.06, 0.37, 0, 0.79, 1, 0.4, 2, 0.1];
new_carpaint_params = [0, 0.06, 0.37, 0, 0.79, 1, 0.4, 2, 0.1];
leather_parts_list = ['leather_bag', 'seat', 'seat_adds', 'backrest_1', 'backrest_2'];
environment = 'white';
carbon_1 = false;
carbon_2 = false;

eventHTMLElem('click', 'environment_button_1', true, function(event) {
  texture_loading = true;
  environment = 'white';
  setMaterialColor('ground', 'far_color_1', 0.576, 0.745, 1, '');
  setMaterialColor('ground', 'far_color_2', 0.42, 0.42, 0.42, '');
  setMaterialColor('ground', 'near_color', 0.49, 0.49, 0.49, '');
  setMaterialValue('ground', 'blending_value', 0.8);
  setCSSRuleStyle('borderColor', '#2c2c2c', '.right-panel-button-core', true,'');
  if (featureAvailable('HDR') == false) {
    setMaterialValue('Verge3D_Environment_World', 'Intencity', 5);
  } else {
    setMaterialValue('Verge3D_Environment_World', 'Intencity', 2);
  }
  setMaterialColor('icons', 'border_color', 0, 0, 0, '');
  bloom_threshhold = 2;
  bloom_strength = 0.3;
  bloom_radius = 0.5;
  if (bloom_enabled == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
  }
  reset_boarder('environment_button', 2, 1);
  replaceTexture('Verge3D_Environment_World', 'environment_1.hdr', './environment_1.hdr', function() {
    texture_loading = false;
  });
});

eventHTMLElem('click', 'leather_button_1', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_brown_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_brown_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_brown_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', false);
  reset_boarder('leather_button', 6, 1);
});

rims_list = [['GROUP', 'Wheel Disk 1'], ['GROUP', 'Wheel Disk 2'], ['GROUP', 'Wheel Disk 3']];

eventHTMLElem('click', 'coach_color_button_1', true, function(event) {
  changing_carpaint([0.27, 0.02, 0.58], [0.67, 0.05, 0.23], 1, 2, 0);
  reset_boarder('coach_color_button', 14, 1);
});

eventHTMLElem('click', 'coach_color_button_3', true, function(event) {
  changing_carpaint([0.76, 0.35, 0], [0.76, 0.2, 0], 0, 0.5, 0);
  reset_boarder('coach_color_button', 14, 3);
});

eventHTMLElem('click', 'carbon_1', true, function(event) {
  if (carbon_1 == false) {
    unfreeze();
    assignMat(['plastic_parts', 'seat_bottom', 'backpack_1_bottom'], 'carbon');
    carbon_1 = true;
    setHTMLElemStyle('borderColor', '#f22', 'carbon_1', true);
    freeze();
  } else if (carbon_1 == true) {
    unfreeze();
    assignMat(['plastic_parts', 'seat_bottom', 'backpack_1_bottom'], 'rought_plastic');
    carbon_1 = false;
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', 'carbon_1', true);
      console.log('white');
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', 'carbon_1', true);
      console.log('black');
    }
    freeze();
  }
});

eventHTMLElem('click', 'rim_1', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 2'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0, 0, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 1);
});

eventHTMLElem('click', 'rim_5', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 3'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0, 0, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 5);
});

eventHTMLElem('click', 'rim_9', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 1'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0, 0, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 9);
});

eventHTMLElem('click', 'environment_button_2', true, function(event) {
  texture_loading = true;
  environment = 'black';
  setMaterialColor('ground', 'far_color_1', 0.028, 0.037, 0.076, '');
  setMaterialColor('ground', 'far_color_2', 0.002, 0.002, 0.002, '');
  setMaterialValue('ground', 'blending_value', 0.9);
  setMaterialColor('ground', 'near_color', 0.433, 0.433, 0.433, '');
  setCSSRuleStyle('borderColor', '#cccccc', '.right-panel-button-core', true,'');
  if (featureAvailable('HDR') == false) {
    setMaterialValue('Verge3D_Environment_World', 'Intencity', 5);
  } else {
    setMaterialValue('Verge3D_Environment_World', 'Intencity', 2);
  }
  setMaterialColor('icons', 'border_color', 1, 1, 1, '');
  bloom_radius = 0.6;
  bloom_strength = 0.5;
  bloom_threshhold = 2;
  if (bloom_enabled == true) {
    bloom(bloom_threshhold, bloom_strength, bloom_radius);
  }
  reset_boarder('environment_button', 2, 2);
  replaceTexture('Verge3D_Environment_World', 'environment_1.hdr', './environment_2.hdr', function() {
    texture_loading = false;
  });
});

eventHTMLElem('click', 'leather_button_2', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_black_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_black_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_black_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', true);
  reset_boarder('leather_button', 6, 2);
});

eventHTMLElem('click', 'coach_color_button_2', true, function(event) {
  changing_carpaint([0.55, 0.58, 0.01], [0.23, 0.65, 0], 1, 2, 0);
  reset_boarder('coach_color_button', 14, 2);
});

eventHTMLElem('click', 'rim_2', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 2'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.655, 0.005, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.1);
  reset_boarder('rim', 12, 2);
});

eventHTMLElem('click', 'rim_6', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 3'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.655, 0.005, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.1);
  reset_boarder('rim', 12, 6);
});

eventHTMLElem('click', 'coach_color_button_4', true, function(event) {
  changing_carpaint([0.11, 0.17, 0.3], [0.02, 0.09, 0.24], 0, 0.5, 0.2);
  reset_boarder('coach_color_button', 14, 4);
});

eventHTMLElem('click', 'rim_10', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 1'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.655, 0.005, 0, '');
  setMaterialValue('wheel_rim', 'roughness', 0.1);
  reset_boarder('rim', 12, 10);
});

eventHTMLElem('click', 'leather_button_3', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_sport_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_sport_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_sport_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', false);
  reset_boarder('leather_button', 6, 3);
});

eventHTMLElem('click', 'carbon_2', true, function(event) {
  if (carbon_2 == false) {
    unfreeze();
    assignMat('chrome_parts', 'carbon');
    carbon_2 = true;
    setHTMLElemStyle('borderColor', '#f22', 'carbon_2', true);
    freeze();
  } else if (carbon_2 == true) {
    unfreeze();
    assignMat('chrome_parts', 'chrome');
    carbon_2 = false;
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', 'carbon_2', true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', 'carbon_2', true);
    }
    freeze();
  }
});

eventHTMLElem('click', 'rim_3', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 2'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.34, 0.34, 0.34, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 3);
});

eventHTMLElem('click', 'rim_11', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 1'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.34, 0.34, 0.34, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 11);
});

eventHTMLElem('click', 'rim_7', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 3'], true);
  setMaterialValue('wheel_rim', 'Chrome', 0);
  setMaterialColor('wheel_rim', 'color', 0.34, 0.34, 0.34, '');
  setMaterialValue('wheel_rim', 'roughness', 0.3);
  reset_boarder('rim', 12, 7);
});

eventHTMLElem('click', 'coach_color_button_5', true, function(event) {
  changing_carpaint([1, 0.94, 0.9], [0.6, 0.57, 0.54], 0, 0.5, 0);
  reset_boarder('coach_color_button', 14, 5);
});

eventHTMLElem('click', 'coach_color_button_6', true, function(event) {
  changing_carpaint([0.02, 0.02, 0.02], [0, 0, 0], 0, 1, 0.2);
  reset_boarder('coach_color_button', 14, 6);
});

eventHTMLElem('click', 'leather_button_4', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_vintage_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_vintage_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_vintage_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', false);
  reset_boarder('leather_button', 6, 4);
});

eventHTMLElem('click', 'rim_4', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 2'], true);
  setMaterialValue('wheel_rim', 'Chrome', 1);
  setMaterialValue('wheel_rim', 'roughness', 0);
  reset_boarder('rim', 12, 4);
});

eventHTMLElem('click', 'rim_8', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 3'], true);
  setMaterialValue('wheel_rim', 'Chrome', 1);
  setMaterialValue('wheel_rim', 'roughness', 0);
  reset_boarder('rim', 12, 8);
});

eventHTMLElem('click', 'rim_12', true, function(event) {
  changeVis(rims_list, false);
  changeVis(['GROUP', 'Wheel Disk 1'], true);
  setMaterialValue('wheel_rim', 'Chrome', 1);
  setMaterialValue('wheel_rim', 'roughness', 0);
  reset_boarder('rim', 12, 12);
});

eventHTMLElem('click', 'leather_button_5', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_white_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_white_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_white_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', true);
  reset_boarder('leather_button', 6, 5);
});

eventHTMLElem('click', 'coach_color_button_7', true, function(event) {
  changing_carpaint([0, 0.01, 0.02], [0, 0, 0.01], 0, 1, 0.3);
  reset_boarder('coach_color_button', 14, 7);
});

eventHTMLElem('click', 'coach_color_button_8', true, function(event) {
  changing_carpaint([0.3, 0.18, 0.08], [0.2, 0.11, 0.05], 0, 0.4, 0.1);
  reset_boarder('coach_color_button', 14, 8);
});

eventHTMLElem('click', 'leather_button_6', true, function(event) {
  texture_loading = true;
  replaceTexture('leather', 'leather_BaseColor', './leather_beige_BaseColor.jpg', function() {});
  replaceTexture('leather', 'leather_OcclusionRoughnessMetallic', './leather_beige_OcclusionRoughnessMetallic.jpg', function() {});
  replaceTexture('leather', 'leather_Normal', './leather_beige_Normal.png', function() {
    texture_loading = false;
  });
  changeVis('seat_adds', false);
  reset_boarder('leather_button', 6, 6);
});

eventHTMLElem('click', 'coach_color_button_9', true, function(event) {
  changing_carpaint([0.82, 0, 0], [0.72, 0, 0.02], 0, 0.5, 0);
  reset_boarder('coach_color_button', 14, 9);
});

eventHTMLElem('click', 'coach_color_button_10', true, function(event) {
  changing_carpaint([0.38, 0.82, 0.4], [0.13, 0.65, 0.74], 1, 1.5, 0);
  reset_boarder('coach_color_button', 14, 10);
});

eventHTMLElem('click', 'coach_color_button_11', true, function(event) {
  changing_carpaint([0, 0.06, 0.37], [0, 0.79, 1], 0.4, 2, 0.1);
  reset_boarder('coach_color_button', 14, 11);
});

eventHTMLElem('click', 'coach_color_button_12', true, function(event) {
  changing_carpaint([0.17, 0.17, 0.17], [0.04, 0.04, 0.04], 0.6, 0.9, 0.3);
  reset_boarder('coach_color_button', 14, 12);
});

eventHTMLElem('click', 'coach_color_button_13', true, function(event) {
  changing_carpaint([0.11, 0, 0], [0.03, 0, 0], 0.2, 1.4, 0);
  reset_boarder('coach_color_button', 14, 13);
});

eventHTMLElem('click', 'coach_color_button_14', true, function(event) {
  changing_carpaint([0.02, 0.24, 0], [0, 0.06, 0], 0.4, 1.4, 0);
  reset_boarder('coach_color_button', 14, 14);
});

front_glass_list = [['GROUP', 'Front Glass 1'], ['GROUP', 'Front Glass 2'], ['GROUP', 'Front Glass 3'], ['GROUP', 'Front Glass 4']];

front_carrier_installed = false;
backpack_1_installed = false;
backpack_2_installed = false;
carriers_list = [['GROUP', 'Carrier 1'], ['GROUP', 'Carrier 2'], ['GROUP', 'Carrier 3']];

mirrors_list = [['GROUP', 'Mirror 1'], ['GROUP', 'Mirror 2']];

mats_list = [['GROUP', 'Mat 1'], ['GROUP', 'Mat 2']];

eventHTMLElem('click', 'glass_1', true, function(event) {
  changeVis(front_glass_list, false);
  changeVis(['GROUP', 'Front Glass 1'], true);
  reset_boarder('glass', 4, 1);
});

eventHTMLElem('click', 'tyre_1', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_1_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_1_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 1);
});

eventHTMLElem('click', 'carrier_1', true, function(event) {
  changeVis(carriers_list, false);
  changeVis(['GROUP', 'Carrier 1'], true);
  changeVis(['GROUP', 'Backpack 1'], false);
  changeVis(['GROUP', 'Backpack 2'], false);
  backpack_1_installed = false;
  backpack_2_installed = false;
  setHTMLElemStyle('borderColor', '#acacac', 'bagpack_1', true);
  setHTMLElemStyle('borderColor', '#acacac', 'bagpack_2', true);
  setHTMLElemStyle('display', 'none', ['bagpack_1', 'bagpack_2'], true);
  reset_boarder('carrier', 3, 1);
});

eventHTMLElem('click', 'mirror_1', true, function(event) {
  changeVis(mirrors_list, false);
  changeVis(['GROUP', 'Mirror 1'], true);
  reset_boarder('mirror', 2, 1);
});

eventHTMLElem('click', 'nameplate_1', true, function(event) {
  assignMat('front_nameplate', 'carpaint');
  reset_boarder('nameplate', 3, 1);
});

eventHTMLElem('click', 'mat_1', true, function(event) {
  changeVis(mats_list, false);
  changeVis(['GROUP', 'Mat 2'], true);
  reset_boarder('mat', 2, 1);
});

eventHTMLElem('click', 'tyre_color_1', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 1);
  reset_boarder('tyre_color', 6, 1);
});

eventHTMLElem('click', 'glass_2', true, function(event) {
  changeVis(front_glass_list, false);
  changeVis(['GROUP', 'Front Glass 2'], true);
  reset_boarder('glass', 4, 2);
});

eventHTMLElem('click', 'nameplate_2', true, function(event) {
  assignMat('front_nameplate', 'carbon');
  reset_boarder('nameplate', 3, 2);
});

eventHTMLElem('click', 'mirror_2', true, function(event) {
  changeVis(mirrors_list, false);
  changeVis(['GROUP', 'Mirror 2'], true);
  reset_boarder('mirror', 2, 2);
});

eventHTMLElem('click', 'tyre_2', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_2_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_2_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 2);
});

eventHTMLElem('click', 'mat_2', true, function(event) {
  changeVis(mats_list, false);
  changeVis(['GROUP', 'Mat 1'], true);
  reset_boarder('mat', 2, 2);
});

eventHTMLElem('click', 'tyre_color_2', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 0);
  setMaterialColor('tyre', 'tyre_coloring', 0.7, 0.7, 0.7, '');
  reset_boarder('tyre_color', 6, 2);
});

eventHTMLElem('click', 'carrier_2', true, function(event) {
  changeVis(carriers_list, false);
  changeVis(['GROUP', 'Carrier 2'], true);
  changeVis(['GROUP', 'Backpack 1'], false);
  backpack_1_installed = false;
  setHTMLElemStyle('borderColor', '#acacac', 'bagpack_2', true);
  setHTMLElemStyle('display', 'Block', 'bagpack_1', true);
  setHTMLElemStyle('display', 'none', 'bagpack_2', true);
  reset_boarder('carrier', 3, 2);
});

eventHTMLElem('click', 'glass_3', true, function(event) {
  changeVis(front_glass_list, false);
  changeVis(['GROUP', 'Front Glass 3'], true);
  reset_boarder('glass', 4, 3);
});

eventHTMLElem('click', 'nameplate_3', true, function(event) {
  assignMat('front_nameplate', 'chrome');
  reset_boarder('nameplate', 3, 3);
});

eventHTMLElem('click', 'tyre_color_3', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 0);
  setMaterialColor('tyre', 'tyre_coloring', 0.65, 0.64, 0, '');
  reset_boarder('tyre_color', 6, 3);
});

eventHTMLElem('click', 'tyre_3', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_3_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_3_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 3);
});

eventHTMLElem('click', 'glass_4', true, function(event) {
  changeVis(front_glass_list, false);
  changeVis(['GROUP', 'Front Glass 4'], true);
  reset_boarder('glass', 4, 4);
});

eventHTMLElem('click', 'tyre_color_4', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 0);
  setMaterialColor('tyre', 'tyre_coloring', 0.73, 0.4, 0, '');
  reset_boarder('tyre_color', 6, 4);
});

eventHTMLElem('click', 'tyre_4', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_4_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_4_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 4);
});

eventHTMLElem('click', 'carrier_3', true, function(event) {
  changeVis(carriers_list, false);
  changeVis(['GROUP', 'Carrier 3'], true);
  changeVis(['GROUP', 'Backpack 2'], false);
  backpack_2_installed = false;
  setHTMLElemStyle('borderColor', '#acacac', 'bagpack_1', true);
  setHTMLElemStyle('display', 'Block', 'bagpack_2', true);
  setHTMLElemStyle('display', 'none', 'bagpack_1', true);
  reset_boarder('carrier', 3, 3);
});

eventHTMLElem('click', 'tyre_color_5', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 0);
  setMaterialColor('tyre', 'tyre_coloring', 0.7, 0, 0, '');
  reset_boarder('tyre_color', 6, 5);
});

eventHTMLElem('click', 'tyre_5', true, function(event) {
  texture_loading = true;
  replaceTexture('tyre', 'tyre_base_rough_ao', './tyre_5_base_rough_ao.jpg', function() {});
  replaceTexture('tyre', 'tyre_normal', './tyre_5_normal.png', function() {
    texture_loading = false;
  });
  reset_boarder('tyre', 5, 5);
});

eventHTMLElem('click', 'tyre_color_6', true, function(event) {
  setMaterialValue('tyre', 'coloring_switcher', 0);
  setMaterialColor('tyre', 'tyre_coloring', 0, 0.32, 0.73, '');
  reset_boarder('tyre_color', 6, 6);
});

eventHTMLElem('click', 'carrier_front', true, function(event) {
  if (front_carrier_installed == false) {
    changeVis(['GROUP', 'Front Carrier'], true);
    setHTMLElemStyle('borderColor', '#f22', 'carrier_front', true);
    front_carrier_installed = true;
  } else if (front_carrier_installed == true) {
    changeVis(['GROUP', 'Front Carrier'], false);
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', 'carrier_front', true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', 'carrier_front', true);
    }
    front_carrier_installed = false;
  }
});

eventHTMLElem('click', 'bagpack_1', true, function(event) {
  if (backpack_2_installed == false) {
    changeVis(['GROUP', 'Backpack 2'], true);
    backpack_2_installed = true;
    setHTMLElemStyle('borderColor', '#f22', 'bagpack_1', true);
  } else if (backpack_2_installed == true) {
    changeVis(['GROUP', 'Backpack 2'], false);
    backpack_2_installed = false;
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', 'bagpack_1', true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', 'bagpack_1', true);
    }
  }
});

eventHTMLElem('click', 'bagpack_2', true, function(event) {
  if (backpack_1_installed == false) {
    changeVis(['GROUP', 'Backpack 1'], true);
    backpack_1_installed = true;
    setHTMLElemStyle('borderColor', '#f22', 'bagpack_2', true);
  } else if (backpack_1_installed == true) {
    changeVis(['GROUP', 'Backpack 1'], false);
    backpack_1_installed = false;
    if (environment == 'white') {
      setHTMLElemStyle('borderColor', '#2c2c2c', 'bagpack_2', true);
    } else if (environment == 'black') {
      setHTMLElemStyle('borderColor', '#cccccc', 'bagpack_2', true);
    }
  }
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
